
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000138  00800100  0000158a  0000161e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000158a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800238  00800238  00001756  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001756  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002379  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001730  00000000  00000000  00003d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001327  00000000  00000000  000054c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  000067e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000090f  00000000  00000000  00006c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f8e  00000000  00000000  000075ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00008539  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
       6:	00 00       	nop
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	00 00       	nop
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	59 c0       	rjmp	.+178    	; 0xe8 <__bad_interrupt>
      36:	00 00       	nop
      38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	15 c4       	rjmp	.+2090   	; 0x86c <__vector_16>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	96 c1       	rjmp	.+812    	; 0x376 <__vector_18>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
      52:	00 00       	nop
      54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
      56:	00 00       	nop
      58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
      82:	00 00       	nop
      84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
      86:	00 00       	nop
      88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
	...

0000008c <__ctors_start>:
      8c:	cf 01       	movw	r24, r30
      8e:	21 02       	muls	r18, r17
      90:	6e 02       	muls	r22, r30
      92:	ee 03       	fmulsu	r22, r22
      94:	70 04       	cpc	r7, r0
      96:	c6 04       	cpc	r12, r6

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e1       	ldi	r29, 0x10	; 16
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ea e8       	ldi	r30, 0x8A	; 138
      ac:	f5 e1       	ldi	r31, 0x15	; 21
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a8 33       	cpi	r26, 0x38	; 56
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	22 e0       	ldi	r18, 0x02	; 2
      c0:	a8 e3       	ldi	r26, 0x38	; 56
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a6 34       	cpi	r26, 0x46	; 70
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>

000000ce <__do_global_ctors>:
      ce:	10 e0       	ldi	r17, 0x00	; 0
      d0:	cc e4       	ldi	r28, 0x4C	; 76
      d2:	d0 e0       	ldi	r29, 0x00	; 0
      d4:	03 c0       	rjmp	.+6      	; 0xdc <__do_global_ctors+0xe>
      d6:	21 97       	sbiw	r28, 0x01	; 1
      d8:	fe 01       	movw	r30, r28
      da:	4d d6       	rcall	.+3226   	; 0xd76 <__tablejump2__>
      dc:	c6 34       	cpi	r28, 0x46	; 70
      de:	d1 07       	cpc	r29, r17
      e0:	d1 f7       	brne	.-12     	; 0xd6 <__do_global_ctors+0x8>
      e2:	7f d4       	rcall	.+2302   	; 0x9e2 <main>
      e4:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <write_blue>:
#include <util/delay.h>
#include <stdlib.h>
#include <stdarg.h>
#include <common.h>

void write_blue(const char *format, ...) {
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	da 95       	dec	r29
      f8:	0f b6       	in	r0, 0x3f	; 63
      fa:	f8 94       	cli
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	0f be       	out	0x3f, r0	; 63
     100:	cd bf       	out	0x3d, r28	; 61
	struct device_driver_t* blue = -1;
	
	blue = get_device_driver("bluetooth_driver", driver_list_head);
     102:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <driver_list_head>
     106:	70 91 3c 02 	lds	r23, 0x023C	; 0x80023c <driver_list_head+0x1>
     10a:	8e ea       	ldi	r24, 0xAE	; 174
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	59 d2       	rcall	.+1202   	; 0x5c2 <get_device_driver>
     110:	8c 01       	movw	r16, r24
	if(blue==-1)
     112:	0f 3f       	cpi	r16, 0xFF	; 255
     114:	8f ef       	ldi	r24, 0xFF	; 255
     116:	18 07       	cpc	r17, r24
     118:	a1 f0       	breq	.+40     	; 0x142 <write_blue+0x58>
		return;
	va_list ap;
	char buf[256];
	va_start(ap, format);
	vsprintf(buf, format, ap);
     11a:	ae 01       	movw	r20, r28
     11c:	47 5f       	subi	r20, 0xF7	; 247
     11e:	5e 4f       	sbci	r21, 0xFE	; 254
     120:	c9 5f       	subi	r28, 0xF9	; 249
     122:	de 4f       	sbci	r29, 0xFE	; 254
     124:	68 81       	ld	r22, Y
     126:	79 81       	ldd	r23, Y+1	; 0x01
     128:	c7 50       	subi	r28, 0x07	; 7
     12a:	d1 40       	sbci	r29, 0x01	; 1
     12c:	ce 01       	movw	r24, r28
     12e:	01 96       	adiw	r24, 0x01	; 1
     130:	55 d7       	rcall	.+3754   	; 0xfdc <vsprintf>
	va_end(ap);
	blue->write(buf);
     132:	d8 01       	movw	r26, r16
     134:	58 96       	adiw	r26, 0x18	; 24
     136:	ed 91       	ld	r30, X+
     138:	fc 91       	ld	r31, X
     13a:	59 97       	sbiw	r26, 0x19	; 25
     13c:	ce 01       	movw	r24, r28
     13e:	01 96       	adiw	r24, 0x01	; 1
     140:	09 95       	icall
     142:	d3 95       	inc	r29
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	08 95       	ret

00000158 <probe_driver>:
ï»¿#include <line_tracer.h>
#include <common.h>
#include "uart_ctrl.h"
int probe_driver(struct device_driver_t** driver_ctrl , char* name)
{
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	ec 01       	movw	r28, r24
     162:	06 2f       	mov	r16, r22
     164:	17 2f       	mov	r17, r23
	*driver_ctrl = -1;
     166:	8f ef       	ldi	r24, 0xFF	; 255
     168:	9f ef       	ldi	r25, 0xFF	; 255
     16a:	99 83       	std	Y+1, r25	; 0x01
     16c:	88 83       	st	Y, r24
	write_uart("get_%s...", name);
     16e:	7f 93       	push	r23
     170:	6f 93       	push	r22
     172:	8f eb       	ldi	r24, 0xBF	; 191
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	9f 93       	push	r25
     178:	8f 93       	push	r24
     17a:	9c d0       	rcall	.+312    	; 0x2b4 <write_uart>
	*driver_ctrl = get_device_driver(name, driver_list_head);
     17c:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <driver_list_head>
     180:	70 91 3c 02 	lds	r23, 0x023C	; 0x80023c <driver_list_head+0x1>
     184:	80 2f       	mov	r24, r16
     186:	91 2f       	mov	r25, r17
     188:	1c d2       	rcall	.+1080   	; 0x5c2 <get_device_driver>
     18a:	99 83       	std	Y+1, r25	; 0x01
     18c:	88 83       	st	Y, r24
	if(*driver_ctrl == -1)
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	0f 90       	pop	r0
     196:	01 96       	adiw	r24, 0x01	; 1
     198:	51 f4       	brne	.+20     	; 0x1ae <probe_driver+0x56>
	{
		write_uart("fail\n");
     19a:	89 ec       	ldi	r24, 0xC9	; 201
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	9f 93       	push	r25
     1a0:	8f 93       	push	r24
     1a2:	88 d0       	rcall	.+272    	; 0x2b4 <write_uart>
		return -1;
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	9f ef       	ldi	r25, 0xFF	; 255
     1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <probe_driver+0x68>
	}
	else
		write_uart("OK\n");
     1ae:	86 ef       	ldi	r24, 0xF6	; 246
     1b0:	91 e0       	ldi	r25, 0x01	; 1
     1b2:	9f 93       	push	r25
     1b4:	8f 93       	push	r24
     1b6:	7e d0       	rcall	.+252    	; 0x2b4 <write_uart>
		
	return 0;
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	08 95       	ret

000001ca <count_led>:
#endif
};

static unsigned char led_count = 0;
int count_led()
{
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
	struct device_driver_t* led = -1;
	led = get_device_driver("led_driver", driver_list_head);
     1ce:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <driver_list_head>
     1d2:	70 91 3c 02 	lds	r23, 0x023C	; 0x80023c <driver_list_head+0x1>
     1d6:	8f ec       	ldi	r24, 0xCF	; 207
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	f3 d1       	rcall	.+998    	; 0x5c2 <get_device_driver>
     1dc:	ec 01       	movw	r28, r24
	if(led == -1)
     1de:	cf 3f       	cpi	r28, 0xFF	; 255
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	d8 07       	cpc	r29, r24
     1e4:	e1 f0       	breq	.+56     	; 0x21e <count_led+0x54>
		return -1;

	led_count++;
     1e6:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <__data_end>
     1ea:	8f 5f       	subi	r24, 0xFF	; 255

	if(led_count > 0x0f)
     1ec:	80 31       	cpi	r24, 0x10	; 16
     1ee:	18 f4       	brcc	.+6      	; 0x1f6 <count_led+0x2c>
	struct device_driver_t* led = -1;
	led = get_device_driver("led_driver", driver_list_head);
	if(led == -1)
		return -1;

	led_count++;
     1f0:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <__data_end>
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <count_led+0x30>

	if(led_count > 0x0f)
		led_count = 0;
     1f6:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <__data_end>

    led->write(0xff, LED_OFF);
     1fa:	e8 8d       	ldd	r30, Y+24	; 0x18
     1fc:	f9 8d       	ldd	r31, Y+25	; 0x19
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	8f ef       	ldi	r24, 0xFF	; 255
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	09 95       	icall
    led->write(led_count, LED_ON);
     208:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <__data_end>
     20c:	e8 8d       	ldd	r30, Y+24	; 0x18
     20e:	f9 8d       	ldd	r31, Y+25	; 0x19
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	09 95       	icall

	return 0;
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <count_led+0x58>
int count_led()
{
	struct device_driver_t* led = -1;
	led = get_device_driver("led_driver", driver_list_head);
	if(led == -1)
		return -1;
     21e:	8f ef       	ldi	r24, 0xFF	; 255
     220:	9f ef       	ldi	r25, 0xFF	; 255

    led->write(0xff, LED_OFF);
    led->write(led_count, LED_ON);

	return 0;
}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <on_led>:
int on_led(char pin)
{
     228:	cf 93       	push	r28
     22a:	c8 2f       	mov	r28, r24
	struct device_driver_t* led = -1;
	led = get_device_driver("led_driver", driver_list_head);
     22c:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <driver_list_head>
     230:	70 91 3c 02 	lds	r23, 0x023C	; 0x80023c <driver_list_head+0x1>
     234:	8f ec       	ldi	r24, 0xCF	; 207
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	c4 d1       	rcall	.+904    	; 0x5c2 <get_device_driver>
	if(led == -1)
     23a:	8f 3f       	cpi	r24, 0xFF	; 255
     23c:	2f ef       	ldi	r18, 0xFF	; 255
     23e:	92 07       	cpc	r25, r18
     240:	91 f0       	breq	.+36     	; 0x266 <on_led+0x3e>
		return -1;
	
	led->write(1<<pin, LED_ON);
     242:	dc 01       	movw	r26, r24
     244:	58 96       	adiw	r26, 0x18	; 24
     246:	ed 91       	ld	r30, X+
     248:	fc 91       	ld	r31, X
     24a:	59 97       	sbiw	r26, 0x19	; 25
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	02 c0       	rjmp	.+4      	; 0x25a <on_led+0x32>
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	ca 95       	dec	r28
     25c:	e2 f7       	brpl	.-8      	; 0x256 <on_led+0x2e>
     25e:	09 95       	icall
	return 0;
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	02 c0       	rjmp	.+4      	; 0x26a <on_led+0x42>
int on_led(char pin)
{
	struct device_driver_t* led = -1;
	led = get_device_driver("led_driver", driver_list_head);
	if(led == -1)
		return -1;
     266:	8f ef       	ldi	r24, 0xFF	; 255
     268:	9f ef       	ldi	r25, 0xFF	; 255
	
	led->write(1<<pin, LED_ON);
	return 0;
}
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <off_led>:
int off_led(char pin)
{
     26e:	cf 93       	push	r28
     270:	c8 2f       	mov	r28, r24
	struct device_driver_t* led = -1;
	led = get_device_driver("led_driver", driver_list_head);
     272:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <driver_list_head>
     276:	70 91 3c 02 	lds	r23, 0x023C	; 0x80023c <driver_list_head+0x1>
     27a:	8f ec       	ldi	r24, 0xCF	; 207
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	a1 d1       	rcall	.+834    	; 0x5c2 <get_device_driver>
	if(led == -1)
     280:	8f 3f       	cpi	r24, 0xFF	; 255
     282:	2f ef       	ldi	r18, 0xFF	; 255
     284:	92 07       	cpc	r25, r18
     286:	91 f0       	breq	.+36     	; 0x2ac <off_led+0x3e>
		return -1;
	led->write(1<<pin, LED_OFF);
     288:	dc 01       	movw	r26, r24
     28a:	58 96       	adiw	r26, 0x18	; 24
     28c:	ed 91       	ld	r30, X+
     28e:	fc 91       	ld	r31, X
     290:	59 97       	sbiw	r26, 0x19	; 25
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <off_led+0x32>
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	ca 95       	dec	r28
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <off_led+0x2e>
     2a4:	09 95       	icall
	return 0;
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <off_led+0x42>
int off_led(char pin)
{
	struct device_driver_t* led = -1;
	led = get_device_driver("led_driver", driver_list_head);
	if(led == -1)
		return -1;
     2ac:	8f ef       	ldi	r24, 0xFF	; 255
     2ae:	9f ef       	ldi	r25, 0xFF	; 255
	led->write(1<<pin, LED_OFF);
	return 0;
}
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <write_uart>:
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	da 95       	dec	r29
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
     2cc:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <driver_list_head>
     2d0:	70 91 3c 02 	lds	r23, 0x023C	; 0x80023c <driver_list_head+0x1>
     2d4:	8a ed       	ldi	r24, 0xDA	; 218
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	74 d1       	rcall	.+744    	; 0x5c2 <get_device_driver>
     2da:	8c 01       	movw	r16, r24
     2dc:	0f 3f       	cpi	r16, 0xFF	; 255
     2de:	8f ef       	ldi	r24, 0xFF	; 255
     2e0:	18 07       	cpc	r17, r24
     2e2:	a1 f0       	breq	.+40     	; 0x30c <write_uart+0x58>
     2e4:	ae 01       	movw	r20, r28
     2e6:	47 5f       	subi	r20, 0xF7	; 247
     2e8:	5e 4f       	sbci	r21, 0xFE	; 254
     2ea:	c9 5f       	subi	r28, 0xF9	; 249
     2ec:	de 4f       	sbci	r29, 0xFE	; 254
     2ee:	68 81       	ld	r22, Y
     2f0:	79 81       	ldd	r23, Y+1	; 0x01
     2f2:	c7 50       	subi	r28, 0x07	; 7
     2f4:	d1 40       	sbci	r29, 0x01	; 1
     2f6:	ce 01       	movw	r24, r28
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	70 d6       	rcall	.+3296   	; 0xfdc <vsprintf>
     2fc:	d8 01       	movw	r26, r16
     2fe:	58 96       	adiw	r26, 0x18	; 24
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	59 97       	sbiw	r26, 0x19	; 25
     306:	ce 01       	movw	r24, r28
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	09 95       	icall
     30c:	d3 95       	inc	r29
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	08 95       	ret

00000322 <init_bluetooth>:
	rx_buf='s';*/
}

int init_bluetooth(void)
{
	UCSR0A = 0x00;
     322:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x98; //rx enable 0x98
     324:	88 e9       	ldi	r24, 0x98	; 152
     326:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
     328:	86 e0       	ldi	r24, 0x06	; 6
     32a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
     32e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 51;                // 9600 BR
     332:	83 e3       	ldi	r24, 0x33	; 51
     334:	89 b9       	out	0x09, r24	; 9
}
     336:	08 95       	ret

00000338 <rx_intterupt>:
	while((UCSR0A&0x80) == 0);
	return UDR0;
}
static char rx_intterupt(void)
{
	if(rx_buf)
     338:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <rx_buf>
     33c:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <rx_buf+0x1>
     340:	00 97       	sbiw	r24, 0x00	; 0
     342:	29 f0       	breq	.+10     	; 0x34e <rx_intterupt+0x16>
	{
		unsigned char tmp_buf = rx_buf;
		rx_buf = 0;
     344:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <rx_buf+0x1>
     348:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <rx_buf>
		return tmp_buf;
     34c:	08 95       	ret
	}
	
	return 0;
     34e:	80 e0       	ldi	r24, 0x00	; 0
}
     350:	08 95       	ret

00000352 <tx_str>:
	UDR0 = tx_data;
}

static void tx_str(char* str)
{
	while(*str!='\0')
     352:	fc 01       	movw	r30, r24
     354:	20 81       	ld	r18, Z
     356:	22 23       	and	r18, r18
     358:	69 f0       	breq	.+26     	; 0x374 <tx_str+0x22>
}

static void tx_char(char tx_data)
{
	while((UCSR0A&0x20) == 0);
	UDR0 = tx_data;
     35a:	9d e0       	ldi	r25, 0x0D	; 13

static void tx_str(char* str)
{
	while(*str!='\0')
	{
		if(*str=='\n')
     35c:	2a 30       	cpi	r18, 0x0A	; 10
     35e:	19 f4       	brne	.+6      	; 0x366 <tx_str+0x14>
	return 0;
}

static void tx_char(char tx_data)
{
	while((UCSR0A&0x20) == 0);
     360:	5d 9b       	sbis	0x0b, 5	; 11
     362:	fe cf       	rjmp	.-4      	; 0x360 <tx_str+0xe>
	UDR0 = tx_data;
     364:	9c b9       	out	0x0c, r25	; 12
{
	while(*str!='\0')
	{
		if(*str=='\n')
		tx_char('\r');
		tx_char(*str);
     366:	81 91       	ld	r24, Z+
	return 0;
}

static void tx_char(char tx_data)
{
	while((UCSR0A&0x20) == 0);
     368:	5d 9b       	sbis	0x0b, 5	; 11
     36a:	fe cf       	rjmp	.-4      	; 0x368 <tx_str+0x16>
	UDR0 = tx_data;
     36c:	8c b9       	out	0x0c, r24	; 12
}

static void tx_str(char* str)
{
	while(*str!='\0')
     36e:	20 81       	ld	r18, Z
     370:	21 11       	cpse	r18, r1
     372:	f4 cf       	rjmp	.-24     	; 0x35c <tx_str+0xa>
     374:	08 95       	ret

00000376 <__vector_18>:
			//if(bluetooth_test = blue->read())
			//write_uart("blue : %d\n",bluetooth_test);
#ifdef BLUETOOTH_DRIVER
static unsigned short rx_buf=0;
ISR(USART0_RX_vect)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
	rx_buf = UDR0;
     384:	8c b1       	in	r24, 0x0c	; 12
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <rx_buf+0x1>
     38c:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <rx_buf>
	rx_buf='w';
	if(UDR0 == 'd')
	rx_buf='d';
	if(UDR0 == 's')
	rx_buf='s';*/
}
     390:	9f 91       	pop	r25
     392:	8f 91       	pop	r24
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <module_init_bluetooth_driver>:
	.init = init_bluetooth,
	.write = tx_str,
	.read = rx_intterupt
};

MODULE_INIT(bluetooth_driver)
     39e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     3a2:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <driver_list_head+0x1>
     3a6:	89 2b       	or	r24, r25
     3a8:	19 f4       	brne	.+6      	; 0x3b0 <module_init_bluetooth_driver+0x12>
     3aa:	8b e3       	ldi	r24, 0x3B	; 59
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	c1 d0       	rcall	.+386    	; 0x532 <init_driver_head>
     3b0:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <driver_list_head+0x1>
     3b4:	8f 93       	push	r24
     3b6:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     3ba:	8f 93       	push	r24
     3bc:	8d b7       	in	r24, 0x3d	; 61
     3be:	9e b7       	in	r25, 0x3e	; 62
     3c0:	4c 97       	sbiw	r24, 0x1c	; 28
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	9e bf       	out	0x3e, r25	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	8d bf       	out	0x3d, r24	; 61
     3cc:	ad b7       	in	r26, 0x3d	; 61
     3ce:	be b7       	in	r27, 0x3e	; 62
     3d0:	11 96       	adiw	r26, 0x01	; 1
     3d2:	8c e1       	ldi	r24, 0x1C	; 28
     3d4:	e6 e0       	ldi	r30, 0x06	; 6
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	01 90       	ld	r0, Z+
     3da:	0d 92       	st	X+, r0
     3dc:	8a 95       	dec	r24
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <module_init_bluetooth_driver+0x3a>
     3e0:	b8 d0       	rcall	.+368    	; 0x552 <add_driver_list>
     3e2:	8d b7       	in	r24, 0x3d	; 61
     3e4:	9e b7       	in	r25, 0x3e	; 62
     3e6:	4e 96       	adiw	r24, 0x1e	; 30
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	9e bf       	out	0x3e, r25	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	8d bf       	out	0x3d, r24	; 61
     3f2:	08 95       	ret

000003f4 <init_infrared>:
#ifdef INFRARED_DRIVER
int init_infrared(void)
{
	int i;
	for(i = INFRARED_PIN1; i<INFRARED_MAX; i++)
		INFRARED_DDR &= ~(1<<i);
     3f4:	d8 98       	cbi	0x1b, 0	; 27
     3f6:	d9 98       	cbi	0x1b, 1	; 27
     3f8:	da 98       	cbi	0x1b, 2	; 27

	return 0;
}
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	08 95       	ret

00000400 <read_infrared>:
int read_infrared(unsigned char *flag)
{
     400:	fc 01       	movw	r30, r24
	int i;
	unsigned char ret = 0;
     402:	90 e0       	ldi	r25, 0x00	; 0
	for(i = INFRARED_PIN1; i<INFRARED_MAX; i++)
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	50 e0       	ldi	r21, 0x00	; 0
	{
		if((INFRARED_PIN & (1<<i)) == 0) // a black line is detected
		{
			ret |= (1<<i);	
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	70 e0       	ldi	r23, 0x00	; 0
{
	int i;
	unsigned char ret = 0;
	for(i = INFRARED_PIN1; i<INFRARED_MAX; i++)
	{
		if((INFRARED_PIN & (1<<i)) == 0) // a black line is detected
     40c:	29 b3       	in	r18, 0x19	; 25
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	04 2e       	mov	r0, r20
     412:	02 c0       	rjmp	.+4      	; 0x418 <read_infrared+0x18>
     414:	35 95       	asr	r19
     416:	27 95       	ror	r18
     418:	0a 94       	dec	r0
     41a:	e2 f7       	brpl	.-8      	; 0x414 <read_infrared+0x14>
     41c:	20 fd       	sbrc	r18, 0
     41e:	08 c0       	rjmp	.+16     	; 0x430 <read_infrared+0x30>
		{
			ret |= (1<<i);	
     420:	9b 01       	movw	r18, r22
     422:	04 2e       	mov	r0, r20
     424:	02 c0       	rjmp	.+4      	; 0x42a <read_infrared+0x2a>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	0a 94       	dec	r0
     42c:	e2 f7       	brpl	.-8      	; 0x426 <read_infrared+0x26>
     42e:	92 2b       	or	r25, r18
}
int read_infrared(unsigned char *flag)
{
	int i;
	unsigned char ret = 0;
	for(i = INFRARED_PIN1; i<INFRARED_MAX; i++)
     430:	4f 5f       	subi	r20, 0xFF	; 255
     432:	5f 4f       	sbci	r21, 0xFF	; 255
     434:	43 30       	cpi	r20, 0x03	; 3
     436:	51 05       	cpc	r21, r1
     438:	49 f7       	brne	.-46     	; 0x40c <read_infrared+0xc>
		if((INFRARED_PIN & (1<<i)) == 0) // a black line is detected
		{
			ret |= (1<<i);	
		}
	}
	*flag = ret;
     43a:	90 83       	st	Z, r25
	
	return 0;
}
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	08 95       	ret

00000442 <module_init_infrared_driver>:
	.name = "infrared_driver",
	.init = init_infrared,
	.read = read_infrared
};

MODULE_INIT(infrared_driver)
     442:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     446:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <driver_list_head+0x1>
     44a:	89 2b       	or	r24, r25
     44c:	19 f4       	brne	.+6      	; 0x454 <module_init_infrared_driver+0x12>
     44e:	8b e3       	ldi	r24, 0x3B	; 59
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	6f d0       	rcall	.+222    	; 0x532 <init_driver_head>
     454:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <driver_list_head+0x1>
     458:	8f 93       	push	r24
     45a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     45e:	8f 93       	push	r24
     460:	8d b7       	in	r24, 0x3d	; 61
     462:	9e b7       	in	r25, 0x3e	; 62
     464:	4c 97       	sbiw	r24, 0x1c	; 28
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	9e bf       	out	0x3e, r25	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	8d bf       	out	0x3d, r24	; 61
     470:	ad b7       	in	r26, 0x3d	; 61
     472:	be b7       	in	r27, 0x3e	; 62
     474:	11 96       	adiw	r26, 0x01	; 1
     476:	8c e1       	ldi	r24, 0x1C	; 28
     478:	e2 e2       	ldi	r30, 0x22	; 34
     47a:	f1 e0       	ldi	r31, 0x01	; 1
     47c:	01 90       	ld	r0, Z+
     47e:	0d 92       	st	X+, r0
     480:	8a 95       	dec	r24
     482:	e1 f7       	brne	.-8      	; 0x47c <module_init_infrared_driver+0x3a>
     484:	66 d0       	rcall	.+204    	; 0x552 <add_driver_list>
     486:	8d b7       	in	r24, 0x3d	; 61
     488:	9e b7       	in	r25, 0x3e	; 62
     48a:	4e 96       	adiw	r24, 0x1e	; 30
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	9e bf       	out	0x3e, r25	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	8d bf       	out	0x3d, r24	; 61
     496:	08 95       	ret

00000498 <init_led>:

#ifdef LED_DRIVER
int init_led(void)
{
	int i;
	for(i = LED_PIN1; i<LED_MAX; i++)
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
	LED_DDR |= (1<<i);
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	44 b3       	in	r20, 0x14	; 20
     4a2:	9b 01       	movw	r18, r22
     4a4:	08 2e       	mov	r0, r24
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <init_led+0x14>
     4a8:	22 0f       	add	r18, r18
     4aa:	33 1f       	adc	r19, r19
     4ac:	0a 94       	dec	r0
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <init_led+0x10>
     4b0:	24 2b       	or	r18, r20
     4b2:	24 bb       	out	0x14, r18	; 20

#ifdef LED_DRIVER
int init_led(void)
{
	int i;
	for(i = LED_PIN1; i<LED_MAX; i++)
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	85 30       	cpi	r24, 0x05	; 5
     4b8:	91 05       	cpc	r25, r1
     4ba:	91 f7       	brne	.-28     	; 0x4a0 <init_led+0x8>
	LED_DDR |= (1<<i);

	return 0;
}
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	08 95       	ret

000004c2 <write_led>:
int write_led(char pin, char op)
{
    op ? (LED_PORT |= pin) : (LED_PORT &= ~pin);
     4c2:	66 23       	and	r22, r22
     4c4:	21 f0       	breq	.+8      	; 0x4ce <write_led+0xc>
     4c6:	95 b3       	in	r25, 0x15	; 21
     4c8:	89 2b       	or	r24, r25
     4ca:	85 bb       	out	0x15, r24	; 21
     4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <write_led+0x14>
     4ce:	95 b3       	in	r25, 0x15	; 21
     4d0:	80 95       	com	r24
     4d2:	89 23       	and	r24, r25
     4d4:	85 bb       	out	0x15, r24	; 21

	return 0;
}
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	08 95       	ret

000004dc <module_init_led_driver>:
    .name = "led_driver",
    .init = init_led,
	.write = write_led
};

MODULE_INIT(led_driver)
     4dc:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     4e0:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <driver_list_head+0x1>
     4e4:	89 2b       	or	r24, r25
     4e6:	19 f4       	brne	.+6      	; 0x4ee <module_init_led_driver+0x12>
     4e8:	8b e3       	ldi	r24, 0x3B	; 59
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	22 d0       	rcall	.+68     	; 0x532 <init_driver_head>
     4ee:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <driver_list_head+0x1>
     4f2:	8f 93       	push	r24
     4f4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     4f8:	8f 93       	push	r24
     4fa:	8d b7       	in	r24, 0x3d	; 61
     4fc:	9e b7       	in	r25, 0x3e	; 62
     4fe:	4c 97       	sbiw	r24, 0x1c	; 28
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	9e bf       	out	0x3e, r25	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	8d bf       	out	0x3d, r24	; 61
     50a:	ad b7       	in	r26, 0x3d	; 61
     50c:	be b7       	in	r27, 0x3e	; 62
     50e:	11 96       	adiw	r26, 0x01	; 1
     510:	8c e1       	ldi	r24, 0x1C	; 28
     512:	ee e3       	ldi	r30, 0x3E	; 62
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	01 90       	ld	r0, Z+
     518:	0d 92       	st	X+, r0
     51a:	8a 95       	dec	r24
     51c:	e1 f7       	brne	.-8      	; 0x516 <module_init_led_driver+0x3a>
     51e:	19 d0       	rcall	.+50     	; 0x552 <add_driver_list>
     520:	8d b7       	in	r24, 0x3d	; 61
     522:	9e b7       	in	r25, 0x3e	; 62
     524:	4e 96       	adiw	r24, 0x1e	; 30
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	9e bf       	out	0x3e, r25	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	8d bf       	out	0x3d, r24	; 61
     530:	08 95       	ret

00000532 <init_driver_head>:
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	ec 01       	movw	r28, r24
     538:	8e e1       	ldi	r24, 0x1E	; 30
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	25 d4       	rcall	.+2122   	; 0xd88 <malloc>
     53e:	99 83       	std	Y+1, r25	; 0x01
     540:	88 83       	st	Y, r24
     542:	00 97       	sbiw	r24, 0x00	; 0
     544:	19 f0       	breq	.+6      	; 0x54c <init_driver_head+0x1a>
     546:	fc 01       	movw	r30, r24
     548:	15 8e       	std	Z+29, r1	; 0x1d
     54a:	14 8e       	std	Z+28, r1	; 0x1c
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <add_driver_list>:
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	eb a1       	ldd	r30, Y+35	; 0x23
     560:	fc a1       	ldd	r31, Y+36	; 0x24
     562:	30 97       	sbiw	r30, 0x00	; 0
     564:	79 f0       	breq	.+30     	; 0x584 <add_driver_list+0x32>
     566:	04 8d       	ldd	r16, Z+28	; 0x1c
     568:	15 8d       	ldd	r17, Z+29	; 0x1d
     56a:	01 15       	cp	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	11 f4       	brne	.+4      	; 0x574 <add_driver_list+0x22>
     570:	0b c0       	rjmp	.+22     	; 0x588 <add_driver_list+0x36>
     572:	8c 01       	movw	r16, r24
     574:	d8 01       	movw	r26, r16
     576:	5c 96       	adiw	r26, 0x1c	; 28
     578:	8d 91       	ld	r24, X+
     57a:	9c 91       	ld	r25, X
     57c:	5d 97       	sbiw	r26, 0x1d	; 29
     57e:	00 97       	sbiw	r24, 0x00	; 0
     580:	c1 f7       	brne	.-16     	; 0x572 <add_driver_list+0x20>
     582:	03 c0       	rjmp	.+6      	; 0x58a <add_driver_list+0x38>
     584:	8f 01       	movw	r16, r30
     586:	01 c0       	rjmp	.+2      	; 0x58a <add_driver_list+0x38>
     588:	8f 01       	movw	r16, r30
     58a:	8e e1       	ldi	r24, 0x1E	; 30
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	fc d3       	rcall	.+2040   	; 0xd88 <malloc>
     590:	dc 01       	movw	r26, r24
     592:	f8 01       	movw	r30, r16
     594:	95 8f       	std	Z+29, r25	; 0x1d
     596:	84 8f       	std	Z+28, r24	; 0x1c
     598:	9c e1       	ldi	r25, 0x1C	; 28
     59a:	fe 01       	movw	r30, r28
     59c:	37 96       	adiw	r30, 0x07	; 7
     59e:	01 90       	ld	r0, Z+
     5a0:	0d 92       	st	X+, r0
     5a2:	9a 95       	dec	r25
     5a4:	e1 f7       	brne	.-8      	; 0x59e <add_driver_list+0x4c>
     5a6:	d8 01       	movw	r26, r16
     5a8:	5c 96       	adiw	r26, 0x1c	; 28
     5aa:	ed 91       	ld	r30, X+
     5ac:	fc 91       	ld	r31, X
     5ae:	5d 97       	sbiw	r26, 0x1d	; 29
     5b0:	15 8e       	std	Z+29, r1	; 0x1d
     5b2:	14 8e       	std	Z+28, r1	; 0x1c
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret

000005c2 <get_device_driver>:
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	7c 01       	movw	r14, r24
     5d0:	eb 01       	movw	r28, r22
     5d2:	20 97       	sbiw	r28, 0x00	; 0
     5d4:	69 f0       	breq	.+26     	; 0x5f0 <get_device_driver+0x2e>
     5d6:	b7 01       	movw	r22, r14
     5d8:	ce 01       	movw	r24, r28
     5da:	f7 d4       	rcall	.+2542   	; 0xfca <strcmp>
     5dc:	89 2b       	or	r24, r25
     5de:	59 f0       	breq	.+22     	; 0x5f6 <get_device_driver+0x34>
     5e0:	0c 8c       	ldd	r0, Y+28	; 0x1c
     5e2:	dd 8d       	ldd	r29, Y+29	; 0x1d
     5e4:	c0 2d       	mov	r28, r0
     5e6:	20 97       	sbiw	r28, 0x00	; 0
     5e8:	b1 f7       	brne	.-20     	; 0x5d6 <get_device_driver+0x14>
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	9f ef       	ldi	r25, 0xFF	; 255
     5ee:	05 c0       	rjmp	.+10     	; 0x5fa <get_device_driver+0x38>
     5f0:	8f ef       	ldi	r24, 0xFF	; 255
     5f2:	9f ef       	ldi	r25, 0xFF	; 255
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <get_device_driver+0x38>
     5f6:	8c 2f       	mov	r24, r28
     5f8:	9d 2f       	mov	r25, r29
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	08 95       	ret

00000608 <init_drivers>:
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	fc 01       	movw	r30, r24
     60e:	c4 8d       	ldd	r28, Z+28	; 0x1c
     610:	d5 8d       	ldd	r29, Z+29	; 0x1d
     612:	20 97       	sbiw	r28, 0x00	; 0
     614:	51 f0       	breq	.+20     	; 0x62a <init_drivers+0x22>
     616:	ec 89       	ldd	r30, Y+20	; 0x14
     618:	fd 89       	ldd	r31, Y+21	; 0x15
     61a:	30 97       	sbiw	r30, 0x00	; 0
     61c:	09 f0       	breq	.+2      	; 0x620 <init_drivers+0x18>
     61e:	09 95       	icall
     620:	0c 8c       	ldd	r0, Y+28	; 0x1c
     622:	dd 8d       	ldd	r29, Y+29	; 0x1d
     624:	c0 2d       	mov	r28, r0
     626:	20 97       	sbiw	r28, 0x00	; 0
     628:	b1 f7       	brne	.-20     	; 0x616 <init_drivers+0xe>
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <init_motor>:
    MOTOR_L2,
    MOTOR_R1,
    MOTOR_R2
};
int init_motor(void)
{
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
#ifdef PC_PWM_MOTOR
	MOTOR_L_DDR |= (1<<MOTOR_L_EN_PIN) | (1<<MOTOR_L1_OUT_PIN) | (1<<MOTOR_L2_OUT_PIN);
     634:	87 b3       	in	r24, 0x17	; 23
     636:	80 67       	ori	r24, 0x70	; 112
     638:	87 bb       	out	0x17, r24	; 23
	MOTOR_L_PORT |= (1<<MOTOR_L_EN_PIN);
     63a:	c4 9a       	sbi	0x18, 4	; 24
	
	MOTOR_R_DDR |= (1<<MOTOR_R_EN_PIN) | (1<<MOTOR_R1_OUT_PIN) | (1<<MOTOR_R2_OUT_PIN);
     63c:	82 b1       	in	r24, 0x02	; 2
     63e:	8c 61       	ori	r24, 0x1C	; 28
     640:	82 b9       	out	0x02, r24	; 2
	MOTOR_R_PORT |= (1<<MOTOR_R_EN_PIN);
     642:	1a 9a       	sbi	0x03, 2	; 3

	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(0<<COM1C1)|(0<<COM1C0)|(1<<WGM11)|(0<<WGM10);
     644:	d2 ea       	ldi	r29, 0xA2	; 162
     646:	df bd       	out	0x2f, r29	; 47
	TCCR1B = (0<<ICNC1)|(0<<ICES1) |(1<<WGM13)  |(1<<WGM12 )|(0<<CS12  )|(1<<CS11 )|(0<<CS10 );
     648:	ca e1       	ldi	r28, 0x1A	; 26
     64a:	ce bd       	out	0x2e, r28	; 46
	TCCR1C = 0x00;
     64c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	ICR1 = 8192;
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e2       	ldi	r25, 0x20	; 32
     654:	97 bd       	out	0x27, r25	; 39
     656:	86 bd       	out	0x26, r24	; 38
	
    OCR1A = ICR1*0.1;
     658:	66 b5       	in	r22, 0x26	; 38
     65a:	77 b5       	in	r23, 0x27	; 39
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	99 d2       	rcall	.+1330   	; 0xb94 <__floatunsisf>
     662:	2d ec       	ldi	r18, 0xCD	; 205
     664:	3c ec       	ldi	r19, 0xCC	; 204
     666:	4c ec       	ldi	r20, 0xCC	; 204
     668:	5d e3       	ldi	r21, 0x3D	; 61
     66a:	fa d2       	rcall	.+1524   	; 0xc60 <__mulsf3>
     66c:	67 d2       	rcall	.+1230   	; 0xb3c <__fixunssfsi>
     66e:	7b bd       	out	0x2b, r23	; 43
     670:	6a bd       	out	0x2a, r22	; 42
    OCR1B = ICR1*0.1;
     672:	66 b5       	in	r22, 0x26	; 38
     674:	77 b5       	in	r23, 0x27	; 39
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	8c d2       	rcall	.+1304   	; 0xb94 <__floatunsisf>
     67c:	2d ec       	ldi	r18, 0xCD	; 205
     67e:	3c ec       	ldi	r19, 0xCC	; 204
     680:	4c ec       	ldi	r20, 0xCC	; 204
     682:	5d e3       	ldi	r21, 0x3D	; 61
     684:	ed d2       	rcall	.+1498   	; 0xc60 <__mulsf3>
     686:	5a d2       	rcall	.+1204   	; 0xb3c <__fixunssfsi>
     688:	79 bd       	out	0x29, r23	; 41
     68a:	68 bd       	out	0x28, r22	; 40



	TCCR3A = (1<<COM3A1)|(0<<COM3A0)|(1<<COM3B1)|(0<<COM3B0)|(0<<COM3C1)|(0<<COM3C0)|(1<<WGM31)|(0<<WGM30);
     68c:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = (0<<ICNC3)|(0<<ICES3) |(1<<WGM33)  |(1<<WGM32 )|(0<<CS32  )|(1<<CS31 )|(0<<CS30 );
     690:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00;
     694:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>

	ICR3H = 8192 >> 8;
     698:	a1 e8       	ldi	r26, 0x81	; 129
     69a:	b0 e0       	ldi	r27, 0x00	; 0
     69c:	80 e2       	ldi	r24, 0x20	; 32
     69e:	8c 93       	st	X, r24
	ICR3L = 8192 & 0xff;
     6a0:	e0 e8       	ldi	r30, 0x80	; 128
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	10 82       	st	Z, r1

    unsigned int tmp_ICR3 = (ICR3H << 8) | (ICR3L & 0xff);
     6a6:	8c 91       	ld	r24, X
    tmp_ICR3 *= 0.1;
     6a8:	60 81       	ld	r22, Z
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	78 2b       	or	r23, r24
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	70 d2       	rcall	.+1248   	; 0xb94 <__floatunsisf>
     6b4:	2d ec       	ldi	r18, 0xCD	; 205
     6b6:	3c ec       	ldi	r19, 0xCC	; 204
     6b8:	4c ec       	ldi	r20, 0xCC	; 204
     6ba:	5d e3       	ldi	r21, 0x3D	; 61
     6bc:	d1 d2       	rcall	.+1442   	; 0xc60 <__mulsf3>
     6be:	3e d2       	rcall	.+1148   	; 0xb3c <__fixunssfsi>
    
	OCR3AH = (tmp_ICR3 >> 8);
     6c0:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
	OCR3AL = (tmp_ICR3 & 0xff);
     6c4:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3BH = (tmp_ICR3 >> 8);
     6c8:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	OCR3BL = (tmp_ICR3 & 0xff);
     6cc:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	TCNT1H = 0;
     6d0:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
     6d2:	1c bc       	out	0x2c, r1	; 44
	TCNT3H = 0;
     6d4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	TCNT3L = 0;
     6d8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
#endif
	return 0;
}
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <write_motor>:

int write_motor(unsigned char motor_sel, unsigned char speed)
{
     6e6:	cf 92       	push	r12
     6e8:	df 92       	push	r13
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
#ifdef PC_PWM_MOTOR
	if(motor_sel == MOTOR_L1)
     6f2:	81 11       	cpse	r24, r1
     6f4:	1c c0       	rjmp	.+56     	; 0x72e <write_motor+0x48>
	{
		OCR1A = ICR1*(speed*0.1);
     6f6:	c6 b5       	in	r28, 0x26	; 38
     6f8:	d7 b5       	in	r29, 0x27	; 39
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	4b d2       	rcall	.+1174   	; 0xb98 <__floatsisf>
     702:	2d ec       	ldi	r18, 0xCD	; 205
     704:	3c ec       	ldi	r19, 0xCC	; 204
     706:	4c ec       	ldi	r20, 0xCC	; 204
     708:	5d e3       	ldi	r21, 0x3D	; 61
     70a:	aa d2       	rcall	.+1364   	; 0xc60 <__mulsf3>
     70c:	6b 01       	movw	r12, r22
     70e:	7c 01       	movw	r14, r24
     710:	be 01       	movw	r22, r28
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	3e d2       	rcall	.+1148   	; 0xb94 <__floatunsisf>
     718:	9b 01       	movw	r18, r22
     71a:	ac 01       	movw	r20, r24
     71c:	c7 01       	movw	r24, r14
     71e:	b6 01       	movw	r22, r12
     720:	9f d2       	rcall	.+1342   	; 0xc60 <__mulsf3>
     722:	0c d2       	rcall	.+1048   	; 0xb3c <__fixunssfsi>
     724:	7b bd       	out	0x2b, r23	; 43
     726:	6a bd       	out	0x2a, r22	; 42
        OCR3BL = (tmp_ICR3 & 0xff);
	}
    else
        return -1;
#endif
	return 0;
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	50 c0       	rjmp	.+160    	; 0x7ce <write_motor+0xe8>
#ifdef PC_PWM_MOTOR
	if(motor_sel == MOTOR_L1)
	{
		OCR1A = ICR1*(speed*0.1);
	}
    else if(motor_sel == MOTOR_L2)
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	e1 f4       	brne	.+56     	; 0x76a <write_motor+0x84>
	{
		OCR1B = ICR1*(speed*0.1);
     732:	c6 b5       	in	r28, 0x26	; 38
     734:	d7 b5       	in	r29, 0x27	; 39
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2d d2       	rcall	.+1114   	; 0xb98 <__floatsisf>
     73e:	2d ec       	ldi	r18, 0xCD	; 205
     740:	3c ec       	ldi	r19, 0xCC	; 204
     742:	4c ec       	ldi	r20, 0xCC	; 204
     744:	5d e3       	ldi	r21, 0x3D	; 61
     746:	8c d2       	rcall	.+1304   	; 0xc60 <__mulsf3>
     748:	6b 01       	movw	r12, r22
     74a:	7c 01       	movw	r14, r24
     74c:	be 01       	movw	r22, r28
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	20 d2       	rcall	.+1088   	; 0xb94 <__floatunsisf>
     754:	9b 01       	movw	r18, r22
     756:	ac 01       	movw	r20, r24
     758:	c7 01       	movw	r24, r14
     75a:	b6 01       	movw	r22, r12
     75c:	81 d2       	rcall	.+1282   	; 0xc60 <__mulsf3>
     75e:	ee d1       	rcall	.+988    	; 0xb3c <__fixunssfsi>
     760:	79 bd       	out	0x29, r23	; 41
     762:	68 bd       	out	0x28, r22	; 40
        OCR3BL = (tmp_ICR3 & 0xff);
	}
    else
        return -1;
#endif
	return 0;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	32 c0       	rjmp	.+100    	; 0x7ce <write_motor+0xe8>
	}
    else if(motor_sel == MOTOR_L2)
	{
		OCR1B = ICR1*(speed*0.1);
	}
	else if(motor_sel == MOTOR_R1)
     76a:	82 30       	cpi	r24, 0x02	; 2
    {
        unsigned int tmp_ICR3 = 8192;//(ICR3H << 8) | (ICR3L & 0xff);
        tmp_ICR3 *= 0.1*speed;
     76c:	b1 f4       	brne	.+44     	; 0x79a <write_motor+0xb4>
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	11 d2       	rcall	.+1058   	; 0xb98 <__floatsisf>
     776:	2d ec       	ldi	r18, 0xCD	; 205
     778:	3c ec       	ldi	r19, 0xCC	; 204
     77a:	4c ec       	ldi	r20, 0xCC	; 204
     77c:	5d e3       	ldi	r21, 0x3D	; 61
     77e:	70 d2       	rcall	.+1248   	; 0xc60 <__mulsf3>
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	56 e4       	ldi	r21, 0x46	; 70
     788:	6b d2       	rcall	.+1238   	; 0xc60 <__mulsf3>
     78a:	d8 d1       	rcall	.+944    	; 0xb3c <__fixunssfsi>
     78c:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>

        OCR3AH = (tmp_ICR3 >> 8);
     790:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
        OCR3BL = (tmp_ICR3 & 0xff);
	}
    else
        return -1;
#endif
	return 0;
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	1a c0       	rjmp	.+52     	; 0x7ce <write_motor+0xe8>
        tmp_ICR3 *= 0.1*speed;

        OCR3AH = (tmp_ICR3 >> 8);
        OCR3AL = (tmp_ICR3 & 0xff);
    }
	else if(motor_sel == MOTOR_R2)
     79a:	83 30       	cpi	r24, 0x03	; 3
	{
        unsigned int tmp_ICR3 = 8192;//(ICR3H << 8) | (ICR3L & 0xff);
        tmp_ICR3 *= 0.1*speed;
     79c:	b1 f4       	brne	.+44     	; 0x7ca <write_motor+0xe4>
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	f9 d1       	rcall	.+1010   	; 0xb98 <__floatsisf>
     7a6:	2d ec       	ldi	r18, 0xCD	; 205
     7a8:	3c ec       	ldi	r19, 0xCC	; 204
     7aa:	4c ec       	ldi	r20, 0xCC	; 204
     7ac:	5d e3       	ldi	r21, 0x3D	; 61
     7ae:	58 d2       	rcall	.+1200   	; 0xc60 <__mulsf3>
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	56 e4       	ldi	r21, 0x46	; 70
     7b8:	53 d2       	rcall	.+1190   	; 0xc60 <__mulsf3>
     7ba:	c0 d1       	rcall	.+896    	; 0xb3c <__fixunssfsi>
     7bc:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

        OCR3BH = (tmp_ICR3 >> 8);
     7c0:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
        OCR3BL = (tmp_ICR3 & 0xff);
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
	}
    else
        return -1;
#endif
	return 0;
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <write_motor+0xe8>
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	9f ef       	ldi	r25, 0xFF	; 255

        OCR3BH = (tmp_ICR3 >> 8);
        OCR3BL = (tmp_ICR3 & 0xff);
	}
    else
        return -1;
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
#endif
	return 0;
}
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	df 90       	pop	r13
     7d8:	cf 90       	pop	r12
     7da:	08 95       	ret

000007dc <module_init_motor_driver>:
     7dc:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
	.name = "motor_driver",
	.init = init_motor,
	.write = write_motor
};

MODULE_INIT(motor_driver)
     7e0:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <driver_list_head+0x1>
     7e4:	89 2b       	or	r24, r25
     7e6:	19 f4       	brne	.+6      	; 0x7ee <module_init_motor_driver+0x12>
     7e8:	8b e3       	ldi	r24, 0x3B	; 59
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	a2 de       	rcall	.-700    	; 0x532 <init_driver_head>
     7ee:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <driver_list_head+0x1>
     7f2:	8f 93       	push	r24
     7f4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     7f8:	8f 93       	push	r24
     7fa:	8d b7       	in	r24, 0x3d	; 61
     7fc:	9e b7       	in	r25, 0x3e	; 62
     7fe:	4c 97       	sbiw	r24, 0x1c	; 28
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	9e bf       	out	0x3e, r25	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	8d bf       	out	0x3d, r24	; 61
     80a:	ad b7       	in	r26, 0x3d	; 61
     80c:	be b7       	in	r27, 0x3e	; 62
     80e:	11 96       	adiw	r26, 0x01	; 1
     810:	8c e1       	ldi	r24, 0x1C	; 28
     812:	ea e5       	ldi	r30, 0x5A	; 90
     814:	f1 e0       	ldi	r31, 0x01	; 1
     816:	01 90       	ld	r0, Z+
     818:	0d 92       	st	X+, r0
     81a:	8a 95       	dec	r24
     81c:	e1 f7       	brne	.-8      	; 0x816 <module_init_motor_driver+0x3a>
     81e:	99 de       	rcall	.-718    	; 0x552 <add_driver_list>
     820:	8d b7       	in	r24, 0x3d	; 61
     822:	9e b7       	in	r25, 0x3e	; 62
     824:	4e 96       	adiw	r24, 0x1e	; 30
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	9e bf       	out	0x3e, r25	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	8d bf       	out	0x3d, r24	; 61
     830:	08 95       	ret

00000832 <read_timer>:
static unsigned char tcnt0_count;

static int read_timer(int* value, char key)
{

	switch(key)
     832:	61 11       	cpse	r22, r1
     834:	0a c0       	rjmp	.+20     	; 0x84a <read_timer+0x18>
	{
		case GET_SEC:
			*value = timer_datas.sec;
     836:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <timer_datas>
     83a:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <timer_datas+0x1>
     83e:	fc 01       	movw	r30, r24
     840:	31 83       	std	Z+1, r19	; 0x01
     842:	20 83       	st	Z, r18
			return 0;
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	08 95       	ret
			break;
		default:
			return -1;
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	return -1;
}
     84e:	08 95       	ret

00000850 <init_timer>:

int init_timer(void)
{
	TIMSK |= 0x1;
     850:	87 b7       	in	r24, 0x37	; 55
     852:	81 60       	ori	r24, 0x01	; 1
     854:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= 0x7; // ì£¼íìë¥¼ ë®ì¶¤ 1024 ëë
     856:	83 b7       	in	r24, 0x33	; 51
     858:	87 60       	ori	r24, 0x07	; 7
     85a:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     85c:	12 be       	out	0x32, r1	; 50
	timer_datas.sec = 0;
     85e:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <timer_datas+0x1>
     862:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <timer_datas>
	return 0;
}
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	08 95       	ret

0000086c <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	0b b6       	in	r0, 0x3b	; 59
     878:	0f 92       	push	r0
     87a:	2f 93       	push	r18
     87c:	3f 93       	push	r19
     87e:	8f 93       	push	r24
     880:	9f 93       	push	r25
     882:	ef 93       	push	r30
     884:	ff 93       	push	r31
	if(tcnt0_count%30 == 0)
     886:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <tcnt0_count>
     88a:	89 e8       	ldi	r24, 0x89	; 137
     88c:	98 9f       	mul	r25, r24
     88e:	81 2d       	mov	r24, r1
     890:	11 24       	eor	r1, r1
     892:	82 95       	swap	r24
     894:	8f 70       	andi	r24, 0x0F	; 15
     896:	39 2f       	mov	r19, r25
     898:	2e e1       	ldi	r18, 0x1E	; 30
     89a:	82 9f       	mul	r24, r18
     89c:	30 19       	sub	r19, r0
     89e:	11 24       	eor	r1, r1
     8a0:	31 11       	cpse	r19, r1
     8a2:	0c c0       	rjmp	.+24     	; 0x8bc <__vector_16+0x50>
	{
		timer_datas.sec++;
     8a4:	ee e3       	ldi	r30, 0x3E	; 62
     8a6:	f2 e0       	ldi	r31, 0x02	; 2
     8a8:	20 81       	ld	r18, Z
     8aa:	31 81       	ldd	r19, Z+1	; 0x01
     8ac:	2f 5f       	subi	r18, 0xFF	; 255
     8ae:	3f 4f       	sbci	r19, 0xFF	; 255
     8b0:	31 83       	std	Z+1, r19	; 0x01
     8b2:	20 83       	st	Z, r18
		if(tcnt0_count >= 240)
     8b4:	90 3f       	cpi	r25, 0xF0	; 240
     8b6:	10 f0       	brcs	.+4      	; 0x8bc <__vector_16+0x50>
			tcnt0_count = 0;
     8b8:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <tcnt0_count>
	}

	tcnt0_count++;
     8bc:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <tcnt0_count>
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <tcnt0_count>
}
     8c6:	ff 91       	pop	r31
     8c8:	ef 91       	pop	r30
     8ca:	9f 91       	pop	r25
     8cc:	8f 91       	pop	r24
     8ce:	3f 91       	pop	r19
     8d0:	2f 91       	pop	r18
     8d2:	0f 90       	pop	r0
     8d4:	0b be       	out	0x3b, r0	; 59
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f 90       	pop	r0
     8dc:	1f 90       	pop	r1
     8de:	18 95       	reti

000008e0 <module_init_timer_driver>:
	.name = "timer_driver",
	.init = init_timer,
	.read = read_timer
};

MODULE_INIT(timer_driver)
     8e0:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     8e4:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <driver_list_head+0x1>
     8e8:	89 2b       	or	r24, r25
     8ea:	19 f4       	brne	.+6      	; 0x8f2 <module_init_timer_driver+0x12>
     8ec:	8b e3       	ldi	r24, 0x3B	; 59
     8ee:	92 e0       	ldi	r25, 0x02	; 2
     8f0:	20 de       	rcall	.-960    	; 0x532 <init_driver_head>
     8f2:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <driver_list_head+0x1>
     8f6:	8f 93       	push	r24
     8f8:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     8fc:	8f 93       	push	r24
     8fe:	8d b7       	in	r24, 0x3d	; 61
     900:	9e b7       	in	r25, 0x3e	; 62
     902:	4c 97       	sbiw	r24, 0x1c	; 28
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	9e bf       	out	0x3e, r25	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	8d bf       	out	0x3d, r24	; 61
     90e:	ad b7       	in	r26, 0x3d	; 61
     910:	be b7       	in	r27, 0x3e	; 62
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	8c e1       	ldi	r24, 0x1C	; 28
     916:	e6 e7       	ldi	r30, 0x76	; 118
     918:	f1 e0       	ldi	r31, 0x01	; 1
     91a:	01 90       	ld	r0, Z+
     91c:	0d 92       	st	X+, r0
     91e:	8a 95       	dec	r24
     920:	e1 f7       	brne	.-8      	; 0x91a <module_init_timer_driver+0x3a>
     922:	17 de       	rcall	.-978    	; 0x552 <add_driver_list>
     924:	8d b7       	in	r24, 0x3d	; 61
     926:	9e b7       	in	r25, 0x3e	; 62
     928:	4e 96       	adiw	r24, 0x1e	; 30
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	9e bf       	out	0x3e, r25	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	8d bf       	out	0x3d, r24	; 61
     934:	08 95       	ret

00000936 <init_uart>:



int init_uart(void)
{
	UCSR1A = 0x00;
     936:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = 0x88; //rx enable 0x98
     93a:	88 e8       	ldi	r24, 0x88	; 136
     93c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;
     940:	86 e0       	ldi	r24, 0x06	; 6
     942:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1H = 0x00;
     946:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 51;                // 9600 BR
     94a:	83 e3       	ldi	r24, 0x33	; 51
     94c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
}
     950:	08 95       	ret

00000952 <tx_str>:
	while((UCSR1A&0x20) == 0);
	UDR1 = tx_data; 
}

static void tx_str(char* str)
{
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
	while(*str!='\0')
     956:	fc 01       	movw	r30, r24
     958:	20 81       	ld	r18, Z
     95a:	22 23       	and	r18, r18
     95c:	a1 f0       	breq	.+40     	; 0x986 <tx_str+0x34>
     95e:	dc 01       	movw	r26, r24
	return UDR1; 
}

static void tx_char(char tx_data)
{
	while((UCSR1A&0x20) == 0);
     960:	eb e9       	ldi	r30, 0x9B	; 155
     962:	f0 e0       	ldi	r31, 0x00	; 0
	UDR1 = tx_data; 
     964:	cc e9       	ldi	r28, 0x9C	; 156
     966:	d0 e0       	ldi	r29, 0x00	; 0
     968:	3d e0       	ldi	r19, 0x0D	; 13

static void tx_str(char* str)
{
	while(*str!='\0')
	{
		if(*str=='\n')
     96a:	2a 30       	cpi	r18, 0x0A	; 10
     96c:	21 f4       	brne	.+8      	; 0x976 <tx_str+0x24>
	return UDR1; 
}

static void tx_char(char tx_data)
{
	while((UCSR1A&0x20) == 0);
     96e:	80 81       	ld	r24, Z
     970:	85 ff       	sbrs	r24, 5
     972:	fd cf       	rjmp	.-6      	; 0x96e <tx_str+0x1c>
	UDR1 = tx_data; 
     974:	38 83       	st	Y, r19
{
	while(*str!='\0')
	{
		if(*str=='\n')
		tx_char('\r');
		tx_char(*str);
     976:	8d 91       	ld	r24, X+
	return UDR1; 
}

static void tx_char(char tx_data)
{
	while((UCSR1A&0x20) == 0);
     978:	90 81       	ld	r25, Z
     97a:	95 ff       	sbrs	r25, 5
     97c:	fd cf       	rjmp	.-6      	; 0x978 <tx_str+0x26>
	UDR1 = tx_data; 
     97e:	88 83       	st	Y, r24
}

static void tx_str(char* str)
{
	while(*str!='\0')
     980:	2c 91       	ld	r18, X
     982:	21 11       	cpse	r18, r1
     984:	f2 cf       	rjmp	.-28     	; 0x96a <tx_str+0x18>
		if(*str=='\n')
		tx_char('\r');
		tx_char(*str);
		str++;
	}
}
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <module_init_uart_driver>:
    .name = "uart_driver",
    .init = init_uart,
	.write = tx_str
};

MODULE_INIT(uart_driver)
     98c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     990:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <driver_list_head+0x1>
     994:	89 2b       	or	r24, r25
     996:	19 f4       	brne	.+6      	; 0x99e <module_init_uart_driver+0x12>
     998:	8b e3       	ldi	r24, 0x3B	; 59
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	ca dd       	rcall	.-1132   	; 0x532 <init_driver_head>
     99e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <driver_list_head+0x1>
     9a2:	8f 93       	push	r24
     9a4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     9a8:	8f 93       	push	r24
     9aa:	8d b7       	in	r24, 0x3d	; 61
     9ac:	9e b7       	in	r25, 0x3e	; 62
     9ae:	4c 97       	sbiw	r24, 0x1c	; 28
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	9e bf       	out	0x3e, r25	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	8d bf       	out	0x3d, r24	; 61
     9ba:	ad b7       	in	r26, 0x3d	; 61
     9bc:	be b7       	in	r27, 0x3e	; 62
     9be:	11 96       	adiw	r26, 0x01	; 1
     9c0:	8c e1       	ldi	r24, 0x1C	; 28
     9c2:	e2 e9       	ldi	r30, 0x92	; 146
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
     9c6:	01 90       	ld	r0, Z+
     9c8:	0d 92       	st	X+, r0
     9ca:	8a 95       	dec	r24
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <module_init_uart_driver+0x3a>
     9ce:	c1 dd       	rcall	.-1150   	; 0x552 <add_driver_list>
     9d0:	8d b7       	in	r24, 0x3d	; 61
     9d2:	9e b7       	in	r25, 0x3e	; 62
     9d4:	4e 96       	adiw	r24, 0x1e	; 30
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	9e bf       	out	0x3e, r25	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	8d bf       	out	0x3d, r24	; 61
     9e0:	08 95       	ret

000009e2 <main>:
#include "apps/motor_ctrl.h"
#include "apps/uart_ctrl.h"
#include "apps/blue_ctrl.h"

int main(void)
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	6d 97       	sbiw	r28, 0x1d	; 29
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
	int current_time = 0, past_time = 0, bluetooth_test = 0;
     9f6:	1a 82       	std	Y+2, r1	; 0x02
     9f8:	19 82       	std	Y+1, r1	; 0x01
	unsigned char infrared_flag;
	unsigned char move_stack[20];
	int stack_count = 0;
	SREG = 0x80;
     9fa:	80 e8       	ldi	r24, 0x80	; 128
     9fc:	8f bf       	out	0x3f, r24	; 63

	init_drivers(driver_list_head);
     9fe:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <driver_list_head>
     a02:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <driver_list_head+0x1>
     a06:	00 de       	rcall	.-1024   	; 0x608 <init_drivers>
	write_uart("\n\ninit_driver...OK\n");
     a08:	86 ee       	ldi	r24, 0xE6	; 230
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	9f 93       	push	r25
     a0e:	8f 93       	push	r24
     a10:	51 dc       	rcall	.-1886   	; 0x2b4 <write_uart>
	
	struct device_driver_t* timer;
	probe_driver(&timer, "timer_driver");
     a12:	6a ef       	ldi	r22, 0xFA	; 250
     a14:	71 e0       	ldi	r23, 0x01	; 1
     a16:	ce 01       	movw	r24, r28
     a18:	48 96       	adiw	r24, 0x18	; 24
     a1a:	9e db       	rcall	.-2244   	; 0x158 <probe_driver>
	
	struct device_driver_t* blue;
	probe_driver(&blue, "bluetooth_driver");
     a1c:	6e ea       	ldi	r22, 0xAE	; 174
     a1e:	71 e0       	ldi	r23, 0x01	; 1
     a20:	ce 01       	movw	r24, r28
     a22:	4a 96       	adiw	r24, 0x1a	; 26
     a24:	99 db       	rcall	.-2254   	; 0x158 <probe_driver>

	struct device_driver_t* infred;
	probe_driver(&infred, "infrared_driver");
     a26:	67 e0       	ldi	r22, 0x07	; 7
     a28:	72 e0       	ldi	r23, 0x02	; 2
     a2a:	ce 01       	movw	r24, r28
     a2c:	4c 96       	adiw	r24, 0x1c	; 28
     a2e:	94 db       	rcall	.-2264   	; 0x158 <probe_driver>
	
	write_uart("\nstart loop\n\n");
     a30:	87 e1       	ldi	r24, 0x17	; 23
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	9f 93       	push	r25
     a36:	8f 93       	push	r24
     a38:	3d dc       	rcall	.-1926   	; 0x2b4 <write_uart>
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	c1 2c       	mov	r12, r1
int main(void)
{
	int current_time = 0, past_time = 0, bluetooth_test = 0;
	unsigned char infrared_flag;
	unsigned char move_stack[20];
	int stack_count = 0;
     a44:	d1 2c       	mov	r13, r1
     a46:	0f 2e       	mov	r0, r31
	{
		past_time = current_time;
		timer->read(&current_time, GET_SEC);
					if(bluetooth_test = blue->read())
					{
						write_uart("blue : %d\n",bluetooth_test);
     a48:	f5 e2       	ldi	r31, 0x25	; 37
     a4a:	af 2e       	mov	r10, r31
     a4c:	f2 e0       	ldi	r31, 0x02	; 2
     a4e:	bf 2e       	mov	r11, r31
     a50:	f0 2d       	mov	r31, r0
     a52:	4e 01       	movw	r8, r28
						write_blue("blue : %d\n",bluetooth_test);
						move_stack[stack_count++] = bluetooth_test;
     a54:	84 e0       	ldi	r24, 0x04	; 4
     a56:	88 0e       	add	r8, r24
     a58:	91 1c       	adc	r9, r1
     a5a:	0f 2e       	mov	r0, r31
		{
			count_led();
			if(move_stack[stack_count-1] == 13)
			{
				move_stack[stack_count] = 0;
				write_uart("%s\n",move_stack);
     a5c:	f0 e3       	ldi	r31, 0x30	; 48
     a5e:	4f 2e       	mov	r4, r31
     a60:	f2 e0       	ldi	r31, 0x02	; 2
     a62:	5f 2e       	mov	r5, r31
     a64:	f0 2d       	mov	r31, r0
     a66:	0f 2e       	mov	r0, r31
		infred->read(&infrared_flag);
		if(infrared_flag != 0)
		{
			if(infrared_flag & (1<<INFRARED_PIN1))
			{
				write_uart("on\n");
     a68:	f4 e3       	ldi	r31, 0x34	; 52
     a6a:	6f 2e       	mov	r6, r31
     a6c:	f2 e0       	ldi	r31, 0x02	; 2
     a6e:	7f 2e       	mov	r7, r31
     a70:	f0 2d       	mov	r31, r0
     a72:	e9 80       	ldd	r14, Y+1	; 0x01
	probe_driver(&infred, "infrared_driver");
	
	write_uart("\nstart loop\n\n");
	while(1)
	{
		past_time = current_time;
     a74:	fa 80       	ldd	r15, Y+2	; 0x02
     a76:	e8 8d       	ldd	r30, Y+24	; 0x18
		timer->read(&current_time, GET_SEC);
     a78:	f9 8d       	ldd	r31, Y+25	; 0x19
     a7a:	06 88       	ldd	r0, Z+22	; 0x16
     a7c:	f7 89       	ldd	r31, Z+23	; 0x17
     a7e:	e0 2d       	mov	r30, r0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	09 95       	icall
     a8a:	ea 8d       	ldd	r30, Y+26	; 0x1a
					if(bluetooth_test = blue->read())
     a8c:	fb 8d       	ldd	r31, Y+27	; 0x1b
     a8e:	06 88       	ldd	r0, Z+22	; 0x16
     a90:	f7 89       	ldd	r31, Z+23	; 0x17
     a92:	e0 2d       	mov	r30, r0
     a94:	09 95       	icall
     a96:	8c 01       	movw	r16, r24
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	b1 f0       	breq	.+44     	; 0xac8 <main+0xe6>
					{
						write_uart("blue : %d\n",bluetooth_test);
     a9c:	1f 93       	push	r17
     a9e:	8f 93       	push	r24
     aa0:	bf 92       	push	r11
     aa2:	af 92       	push	r10
     aa4:	07 dc       	rcall	.-2034   	; 0x2b4 <write_uart>
						write_blue("blue : %d\n",bluetooth_test);
     aa6:	1f 93       	push	r17
     aa8:	0f 93       	push	r16
     aaa:	bf 92       	push	r11
     aac:	af 92       	push	r10
     aae:	1d db       	rcall	.-2502   	; 0xea <write_blue>
     ab0:	f4 01       	movw	r30, r8
						move_stack[stack_count++] = bluetooth_test;
     ab2:	ec 0d       	add	r30, r12
     ab4:	fd 1d       	adc	r31, r13
     ab6:	00 83       	st	Z, r16
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	c6 01       	movw	r24, r12
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	6c 01       	movw	r12, r24
					}
		if(current_time != past_time)
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	9a 81       	ldd	r25, Y+2	; 0x02
     acc:	e8 16       	cp	r14, r24
     ace:	f9 06       	cpc	r15, r25
     ad0:	c9 f0       	breq	.+50     	; 0xb04 <main+0x122>
		{
			count_led();
     ad2:	7b db       	rcall	.-2314   	; 0x1ca <count_led>
     ad4:	e3 e0       	ldi	r30, 0x03	; 3
			if(move_stack[stack_count-1] == 13)
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	ec 0f       	add	r30, r28
     ada:	fd 1f       	adc	r31, r29
     adc:	ec 0d       	add	r30, r12
     ade:	fd 1d       	adc	r31, r13
     ae0:	80 81       	ld	r24, Z
     ae2:	8d 30       	cpi	r24, 0x0D	; 13
     ae4:	79 f4       	brne	.+30     	; 0xb04 <main+0x122>
			{
				move_stack[stack_count] = 0;
     ae6:	f4 01       	movw	r30, r8
     ae8:	ec 0d       	add	r30, r12
     aea:	fd 1d       	adc	r31, r13
     aec:	10 82       	st	Z, r1
				write_uart("%s\n",move_stack);
     aee:	9f 92       	push	r9
     af0:	8f 92       	push	r8
     af2:	5f 92       	push	r5
     af4:	4f 92       	push	r4
     af6:	de db       	rcall	.-2116   	; 0x2b4 <write_uart>
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	c1 2c       	mov	r12, r1
				stack_count = 0;
     b02:	d1 2c       	mov	r13, r1
     b04:	1b 82       	std	Y+3, r1	; 0x03
				bluetooth_test = 0;
			}
			
		}
		
		infrared_flag = 0;
     b06:	ec 8d       	ldd	r30, Y+28	; 0x1c
		infred->read(&infrared_flag);
     b08:	fd 8d       	ldd	r31, Y+29	; 0x1d
     b0a:	06 88       	ldd	r0, Z+22	; 0x16
     b0c:	f7 89       	ldd	r31, Z+23	; 0x17
     b0e:	e0 2d       	mov	r30, r0
     b10:	ce 01       	movw	r24, r28
     b12:	03 96       	adiw	r24, 0x03	; 3
     b14:	09 95       	icall
		if(infrared_flag != 0)
     b16:	8b 81       	ldd	r24, Y+3	; 0x03
     b18:	88 23       	and	r24, r24
     b1a:	09 f4       	brne	.+2      	; 0xb1e <main+0x13c>
		{
			if(infrared_flag & (1<<INFRARED_PIN1))
     b1c:	aa cf       	rjmp	.-172    	; 0xa72 <main+0x90>
     b1e:	80 ff       	sbrs	r24, 0
			{
				write_uart("on\n");
     b20:	09 c0       	rjmp	.+18     	; 0xb34 <main+0x152>
     b22:	7f 92       	push	r7
     b24:	6f 92       	push	r6
				on_led(LED_PIN4);	
     b26:	c6 db       	rcall	.-2164   	; 0x2b4 <write_uart>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	7d db       	rcall	.-2310   	; 0x228 <on_led>
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	9f cf       	rjmp	.-194    	; 0xa72 <main+0x90>
			}
			else
				off_led(LED_PIN4);
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	9a db       	rcall	.-2252   	; 0x26e <off_led>
     b3a:	9b cf       	rjmp	.-202    	; 0xa72 <main+0x90>

00000b3c <__fixunssfsi>:
     b3c:	70 d0       	rcall	.+224    	; 0xc1e <__fp_splitA>
     b3e:	88 f0       	brcs	.+34     	; 0xb62 <__fixunssfsi+0x26>
     b40:	9f 57       	subi	r25, 0x7F	; 127
     b42:	90 f0       	brcs	.+36     	; 0xb68 <__fixunssfsi+0x2c>
     b44:	b9 2f       	mov	r27, r25
     b46:	99 27       	eor	r25, r25
     b48:	b7 51       	subi	r27, 0x17	; 23
     b4a:	a0 f0       	brcs	.+40     	; 0xb74 <__fixunssfsi+0x38>
     b4c:	d1 f0       	breq	.+52     	; 0xb82 <__fixunssfsi+0x46>
     b4e:	66 0f       	add	r22, r22
     b50:	77 1f       	adc	r23, r23
     b52:	88 1f       	adc	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	1a f0       	brmi	.+6      	; 0xb5e <__fixunssfsi+0x22>
     b58:	ba 95       	dec	r27
     b5a:	c9 f7       	brne	.-14     	; 0xb4e <__fixunssfsi+0x12>
     b5c:	12 c0       	rjmp	.+36     	; 0xb82 <__fixunssfsi+0x46>
     b5e:	b1 30       	cpi	r27, 0x01	; 1
     b60:	81 f0       	breq	.+32     	; 0xb82 <__fixunssfsi+0x46>
     b62:	77 d0       	rcall	.+238    	; 0xc52 <__fp_zero>
     b64:	b1 e0       	ldi	r27, 0x01	; 1
     b66:	08 95       	ret
     b68:	74 c0       	rjmp	.+232    	; 0xc52 <__fp_zero>
     b6a:	67 2f       	mov	r22, r23
     b6c:	78 2f       	mov	r23, r24
     b6e:	88 27       	eor	r24, r24
     b70:	b8 5f       	subi	r27, 0xF8	; 248
     b72:	39 f0       	breq	.+14     	; 0xb82 <__fixunssfsi+0x46>
     b74:	b9 3f       	cpi	r27, 0xF9	; 249
     b76:	cc f3       	brlt	.-14     	; 0xb6a <__fixunssfsi+0x2e>
     b78:	86 95       	lsr	r24
     b7a:	77 95       	ror	r23
     b7c:	67 95       	ror	r22
     b7e:	b3 95       	inc	r27
     b80:	d9 f7       	brne	.-10     	; 0xb78 <__fixunssfsi+0x3c>
     b82:	3e f4       	brtc	.+14     	; 0xb92 <__fixunssfsi+0x56>
     b84:	90 95       	com	r25
     b86:	80 95       	com	r24
     b88:	70 95       	com	r23
     b8a:	61 95       	neg	r22
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
     b8e:	8f 4f       	sbci	r24, 0xFF	; 255
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	08 95       	ret

00000b94 <__floatunsisf>:
     b94:	e8 94       	clt
     b96:	09 c0       	rjmp	.+18     	; 0xbaa <__floatsisf+0x12>

00000b98 <__floatsisf>:
     b98:	97 fb       	bst	r25, 7
     b9a:	3e f4       	brtc	.+14     	; 0xbaa <__floatsisf+0x12>
     b9c:	90 95       	com	r25
     b9e:	80 95       	com	r24
     ba0:	70 95       	com	r23
     ba2:	61 95       	neg	r22
     ba4:	7f 4f       	sbci	r23, 0xFF	; 255
     ba6:	8f 4f       	sbci	r24, 0xFF	; 255
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	99 23       	and	r25, r25
     bac:	a9 f0       	breq	.+42     	; 0xbd8 <__floatsisf+0x40>
     bae:	f9 2f       	mov	r31, r25
     bb0:	96 e9       	ldi	r25, 0x96	; 150
     bb2:	bb 27       	eor	r27, r27
     bb4:	93 95       	inc	r25
     bb6:	f6 95       	lsr	r31
     bb8:	87 95       	ror	r24
     bba:	77 95       	ror	r23
     bbc:	67 95       	ror	r22
     bbe:	b7 95       	ror	r27
     bc0:	f1 11       	cpse	r31, r1
     bc2:	f8 cf       	rjmp	.-16     	; 0xbb4 <__floatsisf+0x1c>
     bc4:	fa f4       	brpl	.+62     	; 0xc04 <__floatsisf+0x6c>
     bc6:	bb 0f       	add	r27, r27
     bc8:	11 f4       	brne	.+4      	; 0xbce <__floatsisf+0x36>
     bca:	60 ff       	sbrs	r22, 0
     bcc:	1b c0       	rjmp	.+54     	; 0xc04 <__floatsisf+0x6c>
     bce:	6f 5f       	subi	r22, 0xFF	; 255
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255
     bd2:	8f 4f       	sbci	r24, 0xFF	; 255
     bd4:	9f 4f       	sbci	r25, 0xFF	; 255
     bd6:	16 c0       	rjmp	.+44     	; 0xc04 <__floatsisf+0x6c>
     bd8:	88 23       	and	r24, r24
     bda:	11 f0       	breq	.+4      	; 0xbe0 <__floatsisf+0x48>
     bdc:	96 e9       	ldi	r25, 0x96	; 150
     bde:	11 c0       	rjmp	.+34     	; 0xc02 <__floatsisf+0x6a>
     be0:	77 23       	and	r23, r23
     be2:	21 f0       	breq	.+8      	; 0xbec <__floatsisf+0x54>
     be4:	9e e8       	ldi	r25, 0x8E	; 142
     be6:	87 2f       	mov	r24, r23
     be8:	76 2f       	mov	r23, r22
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <__floatsisf+0x5e>
     bec:	66 23       	and	r22, r22
     bee:	71 f0       	breq	.+28     	; 0xc0c <__floatsisf+0x74>
     bf0:	96 e8       	ldi	r25, 0x86	; 134
     bf2:	86 2f       	mov	r24, r22
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	2a f0       	brmi	.+10     	; 0xc04 <__floatsisf+0x6c>
     bfa:	9a 95       	dec	r25
     bfc:	66 0f       	add	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	88 1f       	adc	r24, r24
     c02:	da f7       	brpl	.-10     	; 0xbfa <__floatsisf+0x62>
     c04:	88 0f       	add	r24, r24
     c06:	96 95       	lsr	r25
     c08:	87 95       	ror	r24
     c0a:	97 f9       	bld	r25, 7
     c0c:	08 95       	ret

00000c0e <__fp_split3>:
     c0e:	57 fd       	sbrc	r21, 7
     c10:	90 58       	subi	r25, 0x80	; 128
     c12:	44 0f       	add	r20, r20
     c14:	55 1f       	adc	r21, r21
     c16:	59 f0       	breq	.+22     	; 0xc2e <__fp_splitA+0x10>
     c18:	5f 3f       	cpi	r21, 0xFF	; 255
     c1a:	71 f0       	breq	.+28     	; 0xc38 <__fp_splitA+0x1a>
     c1c:	47 95       	ror	r20

00000c1e <__fp_splitA>:
     c1e:	88 0f       	add	r24, r24
     c20:	97 fb       	bst	r25, 7
     c22:	99 1f       	adc	r25, r25
     c24:	61 f0       	breq	.+24     	; 0xc3e <__fp_splitA+0x20>
     c26:	9f 3f       	cpi	r25, 0xFF	; 255
     c28:	79 f0       	breq	.+30     	; 0xc48 <__fp_splitA+0x2a>
     c2a:	87 95       	ror	r24
     c2c:	08 95       	ret
     c2e:	12 16       	cp	r1, r18
     c30:	13 06       	cpc	r1, r19
     c32:	14 06       	cpc	r1, r20
     c34:	55 1f       	adc	r21, r21
     c36:	f2 cf       	rjmp	.-28     	; 0xc1c <__fp_split3+0xe>
     c38:	46 95       	lsr	r20
     c3a:	f1 df       	rcall	.-30     	; 0xc1e <__fp_splitA>
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <__fp_splitA+0x30>
     c3e:	16 16       	cp	r1, r22
     c40:	17 06       	cpc	r1, r23
     c42:	18 06       	cpc	r1, r24
     c44:	99 1f       	adc	r25, r25
     c46:	f1 cf       	rjmp	.-30     	; 0xc2a <__fp_splitA+0xc>
     c48:	86 95       	lsr	r24
     c4a:	71 05       	cpc	r23, r1
     c4c:	61 05       	cpc	r22, r1
     c4e:	08 94       	sec
     c50:	08 95       	ret

00000c52 <__fp_zero>:
     c52:	e8 94       	clt

00000c54 <__fp_szero>:
     c54:	bb 27       	eor	r27, r27
     c56:	66 27       	eor	r22, r22
     c58:	77 27       	eor	r23, r23
     c5a:	cb 01       	movw	r24, r22
     c5c:	97 f9       	bld	r25, 7
     c5e:	08 95       	ret

00000c60 <__mulsf3>:
     c60:	0b d0       	rcall	.+22     	; 0xc78 <__mulsf3x>
     c62:	78 c0       	rjmp	.+240    	; 0xd54 <__fp_round>
     c64:	69 d0       	rcall	.+210    	; 0xd38 <__fp_pscA>
     c66:	28 f0       	brcs	.+10     	; 0xc72 <__mulsf3+0x12>
     c68:	6e d0       	rcall	.+220    	; 0xd46 <__fp_pscB>
     c6a:	18 f0       	brcs	.+6      	; 0xc72 <__mulsf3+0x12>
     c6c:	95 23       	and	r25, r21
     c6e:	09 f0       	breq	.+2      	; 0xc72 <__mulsf3+0x12>
     c70:	5a c0       	rjmp	.+180    	; 0xd26 <__fp_inf>
     c72:	5f c0       	rjmp	.+190    	; 0xd32 <__fp_nan>
     c74:	11 24       	eor	r1, r1
     c76:	ee cf       	rjmp	.-36     	; 0xc54 <__fp_szero>

00000c78 <__mulsf3x>:
     c78:	ca df       	rcall	.-108    	; 0xc0e <__fp_split3>
     c7a:	a0 f3       	brcs	.-24     	; 0xc64 <__mulsf3+0x4>

00000c7c <__mulsf3_pse>:
     c7c:	95 9f       	mul	r25, r21
     c7e:	d1 f3       	breq	.-12     	; 0xc74 <__mulsf3+0x14>
     c80:	95 0f       	add	r25, r21
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	55 1f       	adc	r21, r21
     c86:	62 9f       	mul	r22, r18
     c88:	f0 01       	movw	r30, r0
     c8a:	72 9f       	mul	r23, r18
     c8c:	bb 27       	eor	r27, r27
     c8e:	f0 0d       	add	r31, r0
     c90:	b1 1d       	adc	r27, r1
     c92:	63 9f       	mul	r22, r19
     c94:	aa 27       	eor	r26, r26
     c96:	f0 0d       	add	r31, r0
     c98:	b1 1d       	adc	r27, r1
     c9a:	aa 1f       	adc	r26, r26
     c9c:	64 9f       	mul	r22, r20
     c9e:	66 27       	eor	r22, r22
     ca0:	b0 0d       	add	r27, r0
     ca2:	a1 1d       	adc	r26, r1
     ca4:	66 1f       	adc	r22, r22
     ca6:	82 9f       	mul	r24, r18
     ca8:	22 27       	eor	r18, r18
     caa:	b0 0d       	add	r27, r0
     cac:	a1 1d       	adc	r26, r1
     cae:	62 1f       	adc	r22, r18
     cb0:	73 9f       	mul	r23, r19
     cb2:	b0 0d       	add	r27, r0
     cb4:	a1 1d       	adc	r26, r1
     cb6:	62 1f       	adc	r22, r18
     cb8:	83 9f       	mul	r24, r19
     cba:	a0 0d       	add	r26, r0
     cbc:	61 1d       	adc	r22, r1
     cbe:	22 1f       	adc	r18, r18
     cc0:	74 9f       	mul	r23, r20
     cc2:	33 27       	eor	r19, r19
     cc4:	a0 0d       	add	r26, r0
     cc6:	61 1d       	adc	r22, r1
     cc8:	23 1f       	adc	r18, r19
     cca:	84 9f       	mul	r24, r20
     ccc:	60 0d       	add	r22, r0
     cce:	21 1d       	adc	r18, r1
     cd0:	82 2f       	mov	r24, r18
     cd2:	76 2f       	mov	r23, r22
     cd4:	6a 2f       	mov	r22, r26
     cd6:	11 24       	eor	r1, r1
     cd8:	9f 57       	subi	r25, 0x7F	; 127
     cda:	50 40       	sbci	r21, 0x00	; 0
     cdc:	8a f0       	brmi	.+34     	; 0xd00 <__mulsf3_pse+0x84>
     cde:	e1 f0       	breq	.+56     	; 0xd18 <__mulsf3_pse+0x9c>
     ce0:	88 23       	and	r24, r24
     ce2:	4a f0       	brmi	.+18     	; 0xcf6 <__mulsf3_pse+0x7a>
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	bb 1f       	adc	r27, r27
     cea:	66 1f       	adc	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	88 1f       	adc	r24, r24
     cf0:	91 50       	subi	r25, 0x01	; 1
     cf2:	50 40       	sbci	r21, 0x00	; 0
     cf4:	a9 f7       	brne	.-22     	; 0xce0 <__mulsf3_pse+0x64>
     cf6:	9e 3f       	cpi	r25, 0xFE	; 254
     cf8:	51 05       	cpc	r21, r1
     cfa:	70 f0       	brcs	.+28     	; 0xd18 <__mulsf3_pse+0x9c>
     cfc:	14 c0       	rjmp	.+40     	; 0xd26 <__fp_inf>
     cfe:	aa cf       	rjmp	.-172    	; 0xc54 <__fp_szero>
     d00:	5f 3f       	cpi	r21, 0xFF	; 255
     d02:	ec f3       	brlt	.-6      	; 0xcfe <__mulsf3_pse+0x82>
     d04:	98 3e       	cpi	r25, 0xE8	; 232
     d06:	dc f3       	brlt	.-10     	; 0xcfe <__mulsf3_pse+0x82>
     d08:	86 95       	lsr	r24
     d0a:	77 95       	ror	r23
     d0c:	67 95       	ror	r22
     d0e:	b7 95       	ror	r27
     d10:	f7 95       	ror	r31
     d12:	e7 95       	ror	r30
     d14:	9f 5f       	subi	r25, 0xFF	; 255
     d16:	c1 f7       	brne	.-16     	; 0xd08 <__mulsf3_pse+0x8c>
     d18:	fe 2b       	or	r31, r30
     d1a:	88 0f       	add	r24, r24
     d1c:	91 1d       	adc	r25, r1
     d1e:	96 95       	lsr	r25
     d20:	87 95       	ror	r24
     d22:	97 f9       	bld	r25, 7
     d24:	08 95       	ret

00000d26 <__fp_inf>:
     d26:	97 f9       	bld	r25, 7
     d28:	9f 67       	ori	r25, 0x7F	; 127
     d2a:	80 e8       	ldi	r24, 0x80	; 128
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	08 95       	ret

00000d32 <__fp_nan>:
     d32:	9f ef       	ldi	r25, 0xFF	; 255
     d34:	80 ec       	ldi	r24, 0xC0	; 192
     d36:	08 95       	ret

00000d38 <__fp_pscA>:
     d38:	00 24       	eor	r0, r0
     d3a:	0a 94       	dec	r0
     d3c:	16 16       	cp	r1, r22
     d3e:	17 06       	cpc	r1, r23
     d40:	18 06       	cpc	r1, r24
     d42:	09 06       	cpc	r0, r25
     d44:	08 95       	ret

00000d46 <__fp_pscB>:
     d46:	00 24       	eor	r0, r0
     d48:	0a 94       	dec	r0
     d4a:	12 16       	cp	r1, r18
     d4c:	13 06       	cpc	r1, r19
     d4e:	14 06       	cpc	r1, r20
     d50:	05 06       	cpc	r0, r21
     d52:	08 95       	ret

00000d54 <__fp_round>:
     d54:	09 2e       	mov	r0, r25
     d56:	03 94       	inc	r0
     d58:	00 0c       	add	r0, r0
     d5a:	11 f4       	brne	.+4      	; 0xd60 <__fp_round+0xc>
     d5c:	88 23       	and	r24, r24
     d5e:	52 f0       	brmi	.+20     	; 0xd74 <__fp_round+0x20>
     d60:	bb 0f       	add	r27, r27
     d62:	40 f4       	brcc	.+16     	; 0xd74 <__fp_round+0x20>
     d64:	bf 2b       	or	r27, r31
     d66:	11 f4       	brne	.+4      	; 0xd6c <__fp_round+0x18>
     d68:	60 ff       	sbrs	r22, 0
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <__fp_round+0x20>
     d6c:	6f 5f       	subi	r22, 0xFF	; 255
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	8f 4f       	sbci	r24, 0xFF	; 255
     d72:	9f 4f       	sbci	r25, 0xFF	; 255
     d74:	08 95       	ret

00000d76 <__tablejump2__>:
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	00 24       	eor	r0, r0
     d7c:	00 1c       	adc	r0, r0
     d7e:	0b be       	out	0x3b, r0	; 59
     d80:	07 90       	elpm	r0, Z+
     d82:	f6 91       	elpm	r31, Z
     d84:	e0 2d       	mov	r30, r0
     d86:	09 94       	ijmp

00000d88 <malloc>:
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	91 05       	cpc	r25, r1
     d94:	10 f4       	brcc	.+4      	; 0xd9a <malloc+0x12>
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <__flp>
     d9e:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <__flp+0x1>
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	30 97       	sbiw	r30, 0x00	; 0
     dac:	19 f1       	breq	.+70     	; 0xdf4 <malloc+0x6c>
     dae:	40 81       	ld	r20, Z
     db0:	51 81       	ldd	r21, Z+1	; 0x01
     db2:	02 81       	ldd	r16, Z+2	; 0x02
     db4:	13 81       	ldd	r17, Z+3	; 0x03
     db6:	48 17       	cp	r20, r24
     db8:	59 07       	cpc	r21, r25
     dba:	c8 f0       	brcs	.+50     	; 0xdee <malloc+0x66>
     dbc:	84 17       	cp	r24, r20
     dbe:	95 07       	cpc	r25, r21
     dc0:	69 f4       	brne	.+26     	; 0xddc <malloc+0x54>
     dc2:	10 97       	sbiw	r26, 0x00	; 0
     dc4:	31 f0       	breq	.+12     	; 0xdd2 <malloc+0x4a>
     dc6:	12 96       	adiw	r26, 0x02	; 2
     dc8:	0c 93       	st	X, r16
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	1c 93       	st	X, r17
     dd0:	27 c0       	rjmp	.+78     	; 0xe20 <malloc+0x98>
     dd2:	00 93 44 02 	sts	0x0244, r16	; 0x800244 <__flp>
     dd6:	10 93 45 02 	sts	0x0245, r17	; 0x800245 <__flp+0x1>
     dda:	22 c0       	rjmp	.+68     	; 0xe20 <malloc+0x98>
     ddc:	21 15       	cp	r18, r1
     dde:	31 05       	cpc	r19, r1
     de0:	19 f0       	breq	.+6      	; 0xde8 <malloc+0x60>
     de2:	42 17       	cp	r20, r18
     de4:	53 07       	cpc	r21, r19
     de6:	18 f4       	brcc	.+6      	; 0xdee <malloc+0x66>
     de8:	9a 01       	movw	r18, r20
     dea:	bd 01       	movw	r22, r26
     dec:	ef 01       	movw	r28, r30
     dee:	df 01       	movw	r26, r30
     df0:	f8 01       	movw	r30, r16
     df2:	db cf       	rjmp	.-74     	; 0xdaa <malloc+0x22>
     df4:	21 15       	cp	r18, r1
     df6:	31 05       	cpc	r19, r1
     df8:	f9 f0       	breq	.+62     	; 0xe38 <malloc+0xb0>
     dfa:	28 1b       	sub	r18, r24
     dfc:	39 0b       	sbc	r19, r25
     dfe:	24 30       	cpi	r18, 0x04	; 4
     e00:	31 05       	cpc	r19, r1
     e02:	80 f4       	brcc	.+32     	; 0xe24 <malloc+0x9c>
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	61 15       	cp	r22, r1
     e0a:	71 05       	cpc	r23, r1
     e0c:	21 f0       	breq	.+8      	; 0xe16 <malloc+0x8e>
     e0e:	fb 01       	movw	r30, r22
     e10:	93 83       	std	Z+3, r25	; 0x03
     e12:	82 83       	std	Z+2, r24	; 0x02
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <malloc+0x96>
     e16:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <__flp+0x1>
     e1a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__flp>
     e1e:	fe 01       	movw	r30, r28
     e20:	32 96       	adiw	r30, 0x02	; 2
     e22:	44 c0       	rjmp	.+136    	; 0xeac <malloc+0x124>
     e24:	fe 01       	movw	r30, r28
     e26:	e2 0f       	add	r30, r18
     e28:	f3 1f       	adc	r31, r19
     e2a:	81 93       	st	Z+, r24
     e2c:	91 93       	st	Z+, r25
     e2e:	22 50       	subi	r18, 0x02	; 2
     e30:	31 09       	sbc	r19, r1
     e32:	39 83       	std	Y+1, r19	; 0x01
     e34:	28 83       	st	Y, r18
     e36:	3a c0       	rjmp	.+116    	; 0xeac <malloc+0x124>
     e38:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <__brkval>
     e3c:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <__brkval+0x1>
     e40:	23 2b       	or	r18, r19
     e42:	41 f4       	brne	.+16     	; 0xe54 <malloc+0xcc>
     e44:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     e48:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     e4c:	30 93 43 02 	sts	0x0243, r19	; 0x800243 <__brkval+0x1>
     e50:	20 93 42 02 	sts	0x0242, r18	; 0x800242 <__brkval>
     e54:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e58:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e5c:	21 15       	cp	r18, r1
     e5e:	31 05       	cpc	r19, r1
     e60:	41 f4       	brne	.+16     	; 0xe72 <malloc+0xea>
     e62:	2d b7       	in	r18, 0x3d	; 61
     e64:	3e b7       	in	r19, 0x3e	; 62
     e66:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     e6a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     e6e:	24 1b       	sub	r18, r20
     e70:	35 0b       	sbc	r19, r21
     e72:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__brkval>
     e76:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <__brkval+0x1>
     e7a:	e2 17       	cp	r30, r18
     e7c:	f3 07       	cpc	r31, r19
     e7e:	a0 f4       	brcc	.+40     	; 0xea8 <malloc+0x120>
     e80:	2e 1b       	sub	r18, r30
     e82:	3f 0b       	sbc	r19, r31
     e84:	28 17       	cp	r18, r24
     e86:	39 07       	cpc	r19, r25
     e88:	78 f0       	brcs	.+30     	; 0xea8 <malloc+0x120>
     e8a:	ac 01       	movw	r20, r24
     e8c:	4e 5f       	subi	r20, 0xFE	; 254
     e8e:	5f 4f       	sbci	r21, 0xFF	; 255
     e90:	24 17       	cp	r18, r20
     e92:	35 07       	cpc	r19, r21
     e94:	48 f0       	brcs	.+18     	; 0xea8 <malloc+0x120>
     e96:	4e 0f       	add	r20, r30
     e98:	5f 1f       	adc	r21, r31
     e9a:	50 93 43 02 	sts	0x0243, r21	; 0x800243 <__brkval+0x1>
     e9e:	40 93 42 02 	sts	0x0242, r20	; 0x800242 <__brkval>
     ea2:	81 93       	st	Z+, r24
     ea4:	91 93       	st	Z+, r25
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <malloc+0x124>
     ea8:	e0 e0       	ldi	r30, 0x00	; 0
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	cf 01       	movw	r24, r30
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	08 95       	ret

00000eb8 <free>:
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	09 f4       	brne	.+2      	; 0xec2 <free+0xa>
     ec0:	81 c0       	rjmp	.+258    	; 0xfc4 <free+0x10c>
     ec2:	fc 01       	movw	r30, r24
     ec4:	32 97       	sbiw	r30, 0x02	; 2
     ec6:	13 82       	std	Z+3, r1	; 0x03
     ec8:	12 82       	std	Z+2, r1	; 0x02
     eca:	a0 91 44 02 	lds	r26, 0x0244	; 0x800244 <__flp>
     ece:	b0 91 45 02 	lds	r27, 0x0245	; 0x800245 <__flp+0x1>
     ed2:	10 97       	sbiw	r26, 0x00	; 0
     ed4:	81 f4       	brne	.+32     	; 0xef6 <free+0x3e>
     ed6:	20 81       	ld	r18, Z
     ed8:	31 81       	ldd	r19, Z+1	; 0x01
     eda:	82 0f       	add	r24, r18
     edc:	93 1f       	adc	r25, r19
     ede:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <__brkval>
     ee2:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <__brkval+0x1>
     ee6:	28 17       	cp	r18, r24
     ee8:	39 07       	cpc	r19, r25
     eea:	51 f5       	brne	.+84     	; 0xf40 <free+0x88>
     eec:	f0 93 43 02 	sts	0x0243, r31	; 0x800243 <__brkval+0x1>
     ef0:	e0 93 42 02 	sts	0x0242, r30	; 0x800242 <__brkval>
     ef4:	67 c0       	rjmp	.+206    	; 0xfc4 <free+0x10c>
     ef6:	ed 01       	movw	r28, r26
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	ce 17       	cp	r28, r30
     efe:	df 07       	cpc	r29, r31
     f00:	40 f4       	brcc	.+16     	; 0xf12 <free+0x5a>
     f02:	4a 81       	ldd	r20, Y+2	; 0x02
     f04:	5b 81       	ldd	r21, Y+3	; 0x03
     f06:	9e 01       	movw	r18, r28
     f08:	41 15       	cp	r20, r1
     f0a:	51 05       	cpc	r21, r1
     f0c:	f1 f0       	breq	.+60     	; 0xf4a <free+0x92>
     f0e:	ea 01       	movw	r28, r20
     f10:	f5 cf       	rjmp	.-22     	; 0xefc <free+0x44>
     f12:	d3 83       	std	Z+3, r29	; 0x03
     f14:	c2 83       	std	Z+2, r28	; 0x02
     f16:	40 81       	ld	r20, Z
     f18:	51 81       	ldd	r21, Z+1	; 0x01
     f1a:	84 0f       	add	r24, r20
     f1c:	95 1f       	adc	r25, r21
     f1e:	c8 17       	cp	r28, r24
     f20:	d9 07       	cpc	r29, r25
     f22:	59 f4       	brne	.+22     	; 0xf3a <free+0x82>
     f24:	88 81       	ld	r24, Y
     f26:	99 81       	ldd	r25, Y+1	; 0x01
     f28:	84 0f       	add	r24, r20
     f2a:	95 1f       	adc	r25, r21
     f2c:	02 96       	adiw	r24, 0x02	; 2
     f2e:	91 83       	std	Z+1, r25	; 0x01
     f30:	80 83       	st	Z, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	93 83       	std	Z+3, r25	; 0x03
     f38:	82 83       	std	Z+2, r24	; 0x02
     f3a:	21 15       	cp	r18, r1
     f3c:	31 05       	cpc	r19, r1
     f3e:	29 f4       	brne	.+10     	; 0xf4a <free+0x92>
     f40:	f0 93 45 02 	sts	0x0245, r31	; 0x800245 <__flp+0x1>
     f44:	e0 93 44 02 	sts	0x0244, r30	; 0x800244 <__flp>
     f48:	3d c0       	rjmp	.+122    	; 0xfc4 <free+0x10c>
     f4a:	e9 01       	movw	r28, r18
     f4c:	fb 83       	std	Y+3, r31	; 0x03
     f4e:	ea 83       	std	Y+2, r30	; 0x02
     f50:	49 91       	ld	r20, Y+
     f52:	59 91       	ld	r21, Y+
     f54:	c4 0f       	add	r28, r20
     f56:	d5 1f       	adc	r29, r21
     f58:	ec 17       	cp	r30, r28
     f5a:	fd 07       	cpc	r31, r29
     f5c:	61 f4       	brne	.+24     	; 0xf76 <free+0xbe>
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	84 0f       	add	r24, r20
     f64:	95 1f       	adc	r25, r21
     f66:	02 96       	adiw	r24, 0x02	; 2
     f68:	e9 01       	movw	r28, r18
     f6a:	99 83       	std	Y+1, r25	; 0x01
     f6c:	88 83       	st	Y, r24
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	9b 83       	std	Y+3, r25	; 0x03
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	e0 e0       	ldi	r30, 0x00	; 0
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	12 96       	adiw	r26, 0x02	; 2
     f7c:	8d 91       	ld	r24, X+
     f7e:	9c 91       	ld	r25, X
     f80:	13 97       	sbiw	r26, 0x03	; 3
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	19 f0       	breq	.+6      	; 0xf8c <free+0xd4>
     f86:	fd 01       	movw	r30, r26
     f88:	dc 01       	movw	r26, r24
     f8a:	f7 cf       	rjmp	.-18     	; 0xf7a <free+0xc2>
     f8c:	8d 91       	ld	r24, X+
     f8e:	9c 91       	ld	r25, X
     f90:	11 97       	sbiw	r26, 0x01	; 1
     f92:	9d 01       	movw	r18, r26
     f94:	2e 5f       	subi	r18, 0xFE	; 254
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <__brkval>
     fa0:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <__brkval+0x1>
     fa4:	28 17       	cp	r18, r24
     fa6:	39 07       	cpc	r19, r25
     fa8:	69 f4       	brne	.+26     	; 0xfc4 <free+0x10c>
     faa:	30 97       	sbiw	r30, 0x00	; 0
     fac:	29 f4       	brne	.+10     	; 0xfb8 <free+0x100>
     fae:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <__flp+0x1>
     fb2:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <__flp>
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <free+0x104>
     fb8:	13 82       	std	Z+3, r1	; 0x03
     fba:	12 82       	std	Z+2, r1	; 0x02
     fbc:	b0 93 43 02 	sts	0x0243, r27	; 0x800243 <__brkval+0x1>
     fc0:	a0 93 42 02 	sts	0x0242, r26	; 0x800242 <__brkval>
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <strcmp>:
     fca:	fb 01       	movw	r30, r22
     fcc:	dc 01       	movw	r26, r24
     fce:	8d 91       	ld	r24, X+
     fd0:	01 90       	ld	r0, Z+
     fd2:	80 19       	sub	r24, r0
     fd4:	01 10       	cpse	r0, r1
     fd6:	d9 f3       	breq	.-10     	; 0xfce <strcmp+0x4>
     fd8:	99 0b       	sbc	r25, r25
     fda:	08 95       	ret

00000fdc <vsprintf>:
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	2e 97       	sbiw	r28, 0x0e	; 14
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	8c 01       	movw	r16, r24
     ff6:	86 e0       	ldi	r24, 0x06	; 6
     ff8:	8c 83       	std	Y+4, r24	; 0x04
     ffa:	1a 83       	std	Y+2, r17	; 0x02
     ffc:	09 83       	std	Y+1, r16	; 0x01
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	9f e7       	ldi	r25, 0x7F	; 127
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	8d 83       	std	Y+5, r24	; 0x05
    1006:	ce 01       	movw	r24, r28
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	10 d0       	rcall	.+32     	; 0x102c <vfprintf>
    100c:	ef 81       	ldd	r30, Y+7	; 0x07
    100e:	f8 85       	ldd	r31, Y+8	; 0x08
    1010:	e0 0f       	add	r30, r16
    1012:	f1 1f       	adc	r31, r17
    1014:	10 82       	st	Z, r1
    1016:	2e 96       	adiw	r28, 0x0e	; 14
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <vfprintf>:
    102c:	2f 92       	push	r2
    102e:	3f 92       	push	r3
    1030:	4f 92       	push	r4
    1032:	5f 92       	push	r5
    1034:	6f 92       	push	r6
    1036:	7f 92       	push	r7
    1038:	8f 92       	push	r8
    103a:	9f 92       	push	r9
    103c:	af 92       	push	r10
    103e:	bf 92       	push	r11
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	2b 97       	sbiw	r28, 0x0b	; 11
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	6c 01       	movw	r12, r24
    1062:	7b 01       	movw	r14, r22
    1064:	8a 01       	movw	r16, r20
    1066:	fc 01       	movw	r30, r24
    1068:	17 82       	std	Z+7, r1	; 0x07
    106a:	16 82       	std	Z+6, r1	; 0x06
    106c:	83 81       	ldd	r24, Z+3	; 0x03
    106e:	81 ff       	sbrs	r24, 1
    1070:	bf c1       	rjmp	.+894    	; 0x13f0 <__stack+0x2f1>
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	3c 01       	movw	r6, r24
    1078:	f6 01       	movw	r30, r12
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	f7 01       	movw	r30, r14
    107e:	93 fd       	sbrc	r25, 3
    1080:	85 91       	lpm	r24, Z+
    1082:	93 ff       	sbrs	r25, 3
    1084:	81 91       	ld	r24, Z+
    1086:	7f 01       	movw	r14, r30
    1088:	88 23       	and	r24, r24
    108a:	09 f4       	brne	.+2      	; 0x108e <vfprintf+0x62>
    108c:	ad c1       	rjmp	.+858    	; 0x13e8 <__stack+0x2e9>
    108e:	85 32       	cpi	r24, 0x25	; 37
    1090:	39 f4       	brne	.+14     	; 0x10a0 <vfprintf+0x74>
    1092:	93 fd       	sbrc	r25, 3
    1094:	85 91       	lpm	r24, Z+
    1096:	93 ff       	sbrs	r25, 3
    1098:	81 91       	ld	r24, Z+
    109a:	7f 01       	movw	r14, r30
    109c:	85 32       	cpi	r24, 0x25	; 37
    109e:	21 f4       	brne	.+8      	; 0x10a8 <vfprintf+0x7c>
    10a0:	b6 01       	movw	r22, r12
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	d6 d1       	rcall	.+940    	; 0x1452 <fputc>
    10a6:	e8 cf       	rjmp	.-48     	; 0x1078 <vfprintf+0x4c>
    10a8:	91 2c       	mov	r9, r1
    10aa:	21 2c       	mov	r2, r1
    10ac:	31 2c       	mov	r3, r1
    10ae:	ff e1       	ldi	r31, 0x1F	; 31
    10b0:	f3 15       	cp	r31, r3
    10b2:	d8 f0       	brcs	.+54     	; 0x10ea <vfprintf+0xbe>
    10b4:	8b 32       	cpi	r24, 0x2B	; 43
    10b6:	79 f0       	breq	.+30     	; 0x10d6 <vfprintf+0xaa>
    10b8:	38 f4       	brcc	.+14     	; 0x10c8 <vfprintf+0x9c>
    10ba:	80 32       	cpi	r24, 0x20	; 32
    10bc:	79 f0       	breq	.+30     	; 0x10dc <vfprintf+0xb0>
    10be:	83 32       	cpi	r24, 0x23	; 35
    10c0:	a1 f4       	brne	.+40     	; 0x10ea <vfprintf+0xbe>
    10c2:	23 2d       	mov	r18, r3
    10c4:	20 61       	ori	r18, 0x10	; 16
    10c6:	1d c0       	rjmp	.+58     	; 0x1102 <__stack+0x3>
    10c8:	8d 32       	cpi	r24, 0x2D	; 45
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <vfprintf+0xb8>
    10cc:	80 33       	cpi	r24, 0x30	; 48
    10ce:	69 f4       	brne	.+26     	; 0x10ea <vfprintf+0xbe>
    10d0:	23 2d       	mov	r18, r3
    10d2:	21 60       	ori	r18, 0x01	; 1
    10d4:	16 c0       	rjmp	.+44     	; 0x1102 <__stack+0x3>
    10d6:	83 2d       	mov	r24, r3
    10d8:	82 60       	ori	r24, 0x02	; 2
    10da:	38 2e       	mov	r3, r24
    10dc:	e3 2d       	mov	r30, r3
    10de:	e4 60       	ori	r30, 0x04	; 4
    10e0:	3e 2e       	mov	r3, r30
    10e2:	2a c0       	rjmp	.+84     	; 0x1138 <__stack+0x39>
    10e4:	f3 2d       	mov	r31, r3
    10e6:	f8 60       	ori	r31, 0x08	; 8
    10e8:	1d c0       	rjmp	.+58     	; 0x1124 <__stack+0x25>
    10ea:	37 fc       	sbrc	r3, 7
    10ec:	2d c0       	rjmp	.+90     	; 0x1148 <__stack+0x49>
    10ee:	20 ed       	ldi	r18, 0xD0	; 208
    10f0:	28 0f       	add	r18, r24
    10f2:	2a 30       	cpi	r18, 0x0A	; 10
    10f4:	40 f0       	brcs	.+16     	; 0x1106 <__stack+0x7>
    10f6:	8e 32       	cpi	r24, 0x2E	; 46
    10f8:	b9 f4       	brne	.+46     	; 0x1128 <__stack+0x29>
    10fa:	36 fc       	sbrc	r3, 6
    10fc:	75 c1       	rjmp	.+746    	; 0x13e8 <__stack+0x2e9>
    10fe:	23 2d       	mov	r18, r3
    1100:	20 64       	ori	r18, 0x40	; 64
    1102:	32 2e       	mov	r3, r18
    1104:	19 c0       	rjmp	.+50     	; 0x1138 <__stack+0x39>
    1106:	36 fe       	sbrs	r3, 6
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <__stack+0x17>
    110a:	8a e0       	ldi	r24, 0x0A	; 10
    110c:	98 9e       	mul	r9, r24
    110e:	20 0d       	add	r18, r0
    1110:	11 24       	eor	r1, r1
    1112:	92 2e       	mov	r9, r18
    1114:	11 c0       	rjmp	.+34     	; 0x1138 <__stack+0x39>
    1116:	ea e0       	ldi	r30, 0x0A	; 10
    1118:	2e 9e       	mul	r2, r30
    111a:	20 0d       	add	r18, r0
    111c:	11 24       	eor	r1, r1
    111e:	22 2e       	mov	r2, r18
    1120:	f3 2d       	mov	r31, r3
    1122:	f0 62       	ori	r31, 0x20	; 32
    1124:	3f 2e       	mov	r3, r31
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <__stack+0x39>
    1128:	8c 36       	cpi	r24, 0x6C	; 108
    112a:	21 f4       	brne	.+8      	; 0x1134 <__stack+0x35>
    112c:	83 2d       	mov	r24, r3
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	38 2e       	mov	r3, r24
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <__stack+0x39>
    1134:	88 36       	cpi	r24, 0x68	; 104
    1136:	41 f4       	brne	.+16     	; 0x1148 <__stack+0x49>
    1138:	f7 01       	movw	r30, r14
    113a:	93 fd       	sbrc	r25, 3
    113c:	85 91       	lpm	r24, Z+
    113e:	93 ff       	sbrs	r25, 3
    1140:	81 91       	ld	r24, Z+
    1142:	7f 01       	movw	r14, r30
    1144:	81 11       	cpse	r24, r1
    1146:	b3 cf       	rjmp	.-154    	; 0x10ae <vfprintf+0x82>
    1148:	98 2f       	mov	r25, r24
    114a:	9f 7d       	andi	r25, 0xDF	; 223
    114c:	95 54       	subi	r25, 0x45	; 69
    114e:	93 30       	cpi	r25, 0x03	; 3
    1150:	28 f4       	brcc	.+10     	; 0x115c <__stack+0x5d>
    1152:	0c 5f       	subi	r16, 0xFC	; 252
    1154:	1f 4f       	sbci	r17, 0xFF	; 255
    1156:	9f e3       	ldi	r25, 0x3F	; 63
    1158:	99 83       	std	Y+1, r25	; 0x01
    115a:	0d c0       	rjmp	.+26     	; 0x1176 <__stack+0x77>
    115c:	83 36       	cpi	r24, 0x63	; 99
    115e:	31 f0       	breq	.+12     	; 0x116c <__stack+0x6d>
    1160:	83 37       	cpi	r24, 0x73	; 115
    1162:	71 f0       	breq	.+28     	; 0x1180 <__stack+0x81>
    1164:	83 35       	cpi	r24, 0x53	; 83
    1166:	09 f0       	breq	.+2      	; 0x116a <__stack+0x6b>
    1168:	55 c0       	rjmp	.+170    	; 0x1214 <__stack+0x115>
    116a:	20 c0       	rjmp	.+64     	; 0x11ac <__stack+0xad>
    116c:	f8 01       	movw	r30, r16
    116e:	80 81       	ld	r24, Z
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	0e 5f       	subi	r16, 0xFE	; 254
    1174:	1f 4f       	sbci	r17, 0xFF	; 255
    1176:	88 24       	eor	r8, r8
    1178:	83 94       	inc	r8
    117a:	91 2c       	mov	r9, r1
    117c:	53 01       	movw	r10, r6
    117e:	12 c0       	rjmp	.+36     	; 0x11a4 <__stack+0xa5>
    1180:	28 01       	movw	r4, r16
    1182:	f2 e0       	ldi	r31, 0x02	; 2
    1184:	4f 0e       	add	r4, r31
    1186:	51 1c       	adc	r5, r1
    1188:	f8 01       	movw	r30, r16
    118a:	a0 80       	ld	r10, Z
    118c:	b1 80       	ldd	r11, Z+1	; 0x01
    118e:	36 fe       	sbrs	r3, 6
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <__stack+0x99>
    1192:	69 2d       	mov	r22, r9
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	02 c0       	rjmp	.+4      	; 0x119c <__stack+0x9d>
    1198:	6f ef       	ldi	r22, 0xFF	; 255
    119a:	7f ef       	ldi	r23, 0xFF	; 255
    119c:	c5 01       	movw	r24, r10
    119e:	4e d1       	rcall	.+668    	; 0x143c <strnlen>
    11a0:	4c 01       	movw	r8, r24
    11a2:	82 01       	movw	r16, r4
    11a4:	f3 2d       	mov	r31, r3
    11a6:	ff 77       	andi	r31, 0x7F	; 127
    11a8:	3f 2e       	mov	r3, r31
    11aa:	15 c0       	rjmp	.+42     	; 0x11d6 <__stack+0xd7>
    11ac:	28 01       	movw	r4, r16
    11ae:	22 e0       	ldi	r18, 0x02	; 2
    11b0:	42 0e       	add	r4, r18
    11b2:	51 1c       	adc	r5, r1
    11b4:	f8 01       	movw	r30, r16
    11b6:	a0 80       	ld	r10, Z
    11b8:	b1 80       	ldd	r11, Z+1	; 0x01
    11ba:	36 fe       	sbrs	r3, 6
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <__stack+0xc5>
    11be:	69 2d       	mov	r22, r9
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <__stack+0xc9>
    11c4:	6f ef       	ldi	r22, 0xFF	; 255
    11c6:	7f ef       	ldi	r23, 0xFF	; 255
    11c8:	c5 01       	movw	r24, r10
    11ca:	2d d1       	rcall	.+602    	; 0x1426 <strnlen_P>
    11cc:	4c 01       	movw	r8, r24
    11ce:	f3 2d       	mov	r31, r3
    11d0:	f0 68       	ori	r31, 0x80	; 128
    11d2:	3f 2e       	mov	r3, r31
    11d4:	82 01       	movw	r16, r4
    11d6:	33 fc       	sbrc	r3, 3
    11d8:	19 c0       	rjmp	.+50     	; 0x120c <__stack+0x10d>
    11da:	82 2d       	mov	r24, r2
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	88 16       	cp	r8, r24
    11e0:	99 06       	cpc	r9, r25
    11e2:	a0 f4       	brcc	.+40     	; 0x120c <__stack+0x10d>
    11e4:	b6 01       	movw	r22, r12
    11e6:	80 e2       	ldi	r24, 0x20	; 32
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	33 d1       	rcall	.+614    	; 0x1452 <fputc>
    11ec:	2a 94       	dec	r2
    11ee:	f5 cf       	rjmp	.-22     	; 0x11da <__stack+0xdb>
    11f0:	f5 01       	movw	r30, r10
    11f2:	37 fc       	sbrc	r3, 7
    11f4:	85 91       	lpm	r24, Z+
    11f6:	37 fe       	sbrs	r3, 7
    11f8:	81 91       	ld	r24, Z+
    11fa:	5f 01       	movw	r10, r30
    11fc:	b6 01       	movw	r22, r12
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	28 d1       	rcall	.+592    	; 0x1452 <fputc>
    1202:	21 10       	cpse	r2, r1
    1204:	2a 94       	dec	r2
    1206:	21 e0       	ldi	r18, 0x01	; 1
    1208:	82 1a       	sub	r8, r18
    120a:	91 08       	sbc	r9, r1
    120c:	81 14       	cp	r8, r1
    120e:	91 04       	cpc	r9, r1
    1210:	79 f7       	brne	.-34     	; 0x11f0 <__stack+0xf1>
    1212:	e1 c0       	rjmp	.+450    	; 0x13d6 <__stack+0x2d7>
    1214:	84 36       	cpi	r24, 0x64	; 100
    1216:	11 f0       	breq	.+4      	; 0x121c <__stack+0x11d>
    1218:	89 36       	cpi	r24, 0x69	; 105
    121a:	39 f5       	brne	.+78     	; 0x126a <__stack+0x16b>
    121c:	f8 01       	movw	r30, r16
    121e:	37 fe       	sbrs	r3, 7
    1220:	07 c0       	rjmp	.+14     	; 0x1230 <__stack+0x131>
    1222:	60 81       	ld	r22, Z
    1224:	71 81       	ldd	r23, Z+1	; 0x01
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	0c 5f       	subi	r16, 0xFC	; 252
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <__stack+0x141>
    1230:	60 81       	ld	r22, Z
    1232:	71 81       	ldd	r23, Z+1	; 0x01
    1234:	07 2e       	mov	r0, r23
    1236:	00 0c       	add	r0, r0
    1238:	88 0b       	sbc	r24, r24
    123a:	99 0b       	sbc	r25, r25
    123c:	0e 5f       	subi	r16, 0xFE	; 254
    123e:	1f 4f       	sbci	r17, 0xFF	; 255
    1240:	f3 2d       	mov	r31, r3
    1242:	ff 76       	andi	r31, 0x6F	; 111
    1244:	3f 2e       	mov	r3, r31
    1246:	97 ff       	sbrs	r25, 7
    1248:	09 c0       	rjmp	.+18     	; 0x125c <__stack+0x15d>
    124a:	90 95       	com	r25
    124c:	80 95       	com	r24
    124e:	70 95       	com	r23
    1250:	61 95       	neg	r22
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	8f 4f       	sbci	r24, 0xFF	; 255
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	f0 68       	ori	r31, 0x80	; 128
    125a:	3f 2e       	mov	r3, r31
    125c:	2a e0       	ldi	r18, 0x0A	; 10
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	a3 01       	movw	r20, r6
    1262:	33 d1       	rcall	.+614    	; 0x14ca <__ultoa_invert>
    1264:	88 2e       	mov	r8, r24
    1266:	86 18       	sub	r8, r6
    1268:	44 c0       	rjmp	.+136    	; 0x12f2 <__stack+0x1f3>
    126a:	85 37       	cpi	r24, 0x75	; 117
    126c:	31 f4       	brne	.+12     	; 0x127a <__stack+0x17b>
    126e:	23 2d       	mov	r18, r3
    1270:	2f 7e       	andi	r18, 0xEF	; 239
    1272:	b2 2e       	mov	r11, r18
    1274:	2a e0       	ldi	r18, 0x0A	; 10
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	25 c0       	rjmp	.+74     	; 0x12c4 <__stack+0x1c5>
    127a:	93 2d       	mov	r25, r3
    127c:	99 7f       	andi	r25, 0xF9	; 249
    127e:	b9 2e       	mov	r11, r25
    1280:	8f 36       	cpi	r24, 0x6F	; 111
    1282:	c1 f0       	breq	.+48     	; 0x12b4 <__stack+0x1b5>
    1284:	18 f4       	brcc	.+6      	; 0x128c <__stack+0x18d>
    1286:	88 35       	cpi	r24, 0x58	; 88
    1288:	79 f0       	breq	.+30     	; 0x12a8 <__stack+0x1a9>
    128a:	ae c0       	rjmp	.+348    	; 0x13e8 <__stack+0x2e9>
    128c:	80 37       	cpi	r24, 0x70	; 112
    128e:	19 f0       	breq	.+6      	; 0x1296 <__stack+0x197>
    1290:	88 37       	cpi	r24, 0x78	; 120
    1292:	21 f0       	breq	.+8      	; 0x129c <__stack+0x19d>
    1294:	a9 c0       	rjmp	.+338    	; 0x13e8 <__stack+0x2e9>
    1296:	e9 2f       	mov	r30, r25
    1298:	e0 61       	ori	r30, 0x10	; 16
    129a:	be 2e       	mov	r11, r30
    129c:	b4 fe       	sbrs	r11, 4
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <__stack+0x1bb>
    12a0:	fb 2d       	mov	r31, r11
    12a2:	f4 60       	ori	r31, 0x04	; 4
    12a4:	bf 2e       	mov	r11, r31
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <__stack+0x1bb>
    12a8:	34 fe       	sbrs	r3, 4
    12aa:	0a c0       	rjmp	.+20     	; 0x12c0 <__stack+0x1c1>
    12ac:	29 2f       	mov	r18, r25
    12ae:	26 60       	ori	r18, 0x06	; 6
    12b0:	b2 2e       	mov	r11, r18
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <__stack+0x1c1>
    12b4:	28 e0       	ldi	r18, 0x08	; 8
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <__stack+0x1c5>
    12ba:	20 e1       	ldi	r18, 0x10	; 16
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <__stack+0x1c5>
    12c0:	20 e1       	ldi	r18, 0x10	; 16
    12c2:	32 e0       	ldi	r19, 0x02	; 2
    12c4:	f8 01       	movw	r30, r16
    12c6:	b7 fe       	sbrs	r11, 7
    12c8:	07 c0       	rjmp	.+14     	; 0x12d8 <__stack+0x1d9>
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	0c 5f       	subi	r16, 0xFC	; 252
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <__stack+0x1e5>
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 5f       	subi	r16, 0xFE	; 254
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	a3 01       	movw	r20, r6
    12e6:	f1 d0       	rcall	.+482    	; 0x14ca <__ultoa_invert>
    12e8:	88 2e       	mov	r8, r24
    12ea:	86 18       	sub	r8, r6
    12ec:	fb 2d       	mov	r31, r11
    12ee:	ff 77       	andi	r31, 0x7F	; 127
    12f0:	3f 2e       	mov	r3, r31
    12f2:	36 fe       	sbrs	r3, 6
    12f4:	0d c0       	rjmp	.+26     	; 0x1310 <__stack+0x211>
    12f6:	23 2d       	mov	r18, r3
    12f8:	2e 7f       	andi	r18, 0xFE	; 254
    12fa:	a2 2e       	mov	r10, r18
    12fc:	89 14       	cp	r8, r9
    12fe:	58 f4       	brcc	.+22     	; 0x1316 <__stack+0x217>
    1300:	34 fe       	sbrs	r3, 4
    1302:	0b c0       	rjmp	.+22     	; 0x131a <__stack+0x21b>
    1304:	32 fc       	sbrc	r3, 2
    1306:	09 c0       	rjmp	.+18     	; 0x131a <__stack+0x21b>
    1308:	83 2d       	mov	r24, r3
    130a:	8e 7e       	andi	r24, 0xEE	; 238
    130c:	a8 2e       	mov	r10, r24
    130e:	05 c0       	rjmp	.+10     	; 0x131a <__stack+0x21b>
    1310:	b8 2c       	mov	r11, r8
    1312:	a3 2c       	mov	r10, r3
    1314:	03 c0       	rjmp	.+6      	; 0x131c <__stack+0x21d>
    1316:	b8 2c       	mov	r11, r8
    1318:	01 c0       	rjmp	.+2      	; 0x131c <__stack+0x21d>
    131a:	b9 2c       	mov	r11, r9
    131c:	a4 fe       	sbrs	r10, 4
    131e:	0f c0       	rjmp	.+30     	; 0x133e <__stack+0x23f>
    1320:	fe 01       	movw	r30, r28
    1322:	e8 0d       	add	r30, r8
    1324:	f1 1d       	adc	r31, r1
    1326:	80 81       	ld	r24, Z
    1328:	80 33       	cpi	r24, 0x30	; 48
    132a:	21 f4       	brne	.+8      	; 0x1334 <__stack+0x235>
    132c:	9a 2d       	mov	r25, r10
    132e:	99 7e       	andi	r25, 0xE9	; 233
    1330:	a9 2e       	mov	r10, r25
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <__stack+0x247>
    1334:	a2 fe       	sbrs	r10, 2
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <__stack+0x245>
    1338:	b3 94       	inc	r11
    133a:	b3 94       	inc	r11
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <__stack+0x247>
    133e:	8a 2d       	mov	r24, r10
    1340:	86 78       	andi	r24, 0x86	; 134
    1342:	09 f0       	breq	.+2      	; 0x1346 <__stack+0x247>
    1344:	b3 94       	inc	r11
    1346:	a3 fc       	sbrc	r10, 3
    1348:	10 c0       	rjmp	.+32     	; 0x136a <__stack+0x26b>
    134a:	a0 fe       	sbrs	r10, 0
    134c:	06 c0       	rjmp	.+12     	; 0x135a <__stack+0x25b>
    134e:	b2 14       	cp	r11, r2
    1350:	80 f4       	brcc	.+32     	; 0x1372 <__stack+0x273>
    1352:	28 0c       	add	r2, r8
    1354:	92 2c       	mov	r9, r2
    1356:	9b 18       	sub	r9, r11
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <__stack+0x275>
    135a:	b2 14       	cp	r11, r2
    135c:	58 f4       	brcc	.+22     	; 0x1374 <__stack+0x275>
    135e:	b6 01       	movw	r22, r12
    1360:	80 e2       	ldi	r24, 0x20	; 32
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	76 d0       	rcall	.+236    	; 0x1452 <fputc>
    1366:	b3 94       	inc	r11
    1368:	f8 cf       	rjmp	.-16     	; 0x135a <__stack+0x25b>
    136a:	b2 14       	cp	r11, r2
    136c:	18 f4       	brcc	.+6      	; 0x1374 <__stack+0x275>
    136e:	2b 18       	sub	r2, r11
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <__stack+0x277>
    1372:	98 2c       	mov	r9, r8
    1374:	21 2c       	mov	r2, r1
    1376:	a4 fe       	sbrs	r10, 4
    1378:	0f c0       	rjmp	.+30     	; 0x1398 <__stack+0x299>
    137a:	b6 01       	movw	r22, r12
    137c:	80 e3       	ldi	r24, 0x30	; 48
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	68 d0       	rcall	.+208    	; 0x1452 <fputc>
    1382:	a2 fe       	sbrs	r10, 2
    1384:	16 c0       	rjmp	.+44     	; 0x13b2 <__stack+0x2b3>
    1386:	a1 fc       	sbrc	r10, 1
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <__stack+0x291>
    138a:	88 e7       	ldi	r24, 0x78	; 120
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <__stack+0x295>
    1390:	88 e5       	ldi	r24, 0x58	; 88
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	b6 01       	movw	r22, r12
    1396:	0c c0       	rjmp	.+24     	; 0x13b0 <__stack+0x2b1>
    1398:	8a 2d       	mov	r24, r10
    139a:	86 78       	andi	r24, 0x86	; 134
    139c:	51 f0       	breq	.+20     	; 0x13b2 <__stack+0x2b3>
    139e:	a1 fe       	sbrs	r10, 1
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <__stack+0x2a7>
    13a2:	8b e2       	ldi	r24, 0x2B	; 43
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <__stack+0x2a9>
    13a6:	80 e2       	ldi	r24, 0x20	; 32
    13a8:	a7 fc       	sbrc	r10, 7
    13aa:	8d e2       	ldi	r24, 0x2D	; 45
    13ac:	b6 01       	movw	r22, r12
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	50 d0       	rcall	.+160    	; 0x1452 <fputc>
    13b2:	89 14       	cp	r8, r9
    13b4:	30 f4       	brcc	.+12     	; 0x13c2 <__stack+0x2c3>
    13b6:	b6 01       	movw	r22, r12
    13b8:	80 e3       	ldi	r24, 0x30	; 48
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	4a d0       	rcall	.+148    	; 0x1452 <fputc>
    13be:	9a 94       	dec	r9
    13c0:	f8 cf       	rjmp	.-16     	; 0x13b2 <__stack+0x2b3>
    13c2:	8a 94       	dec	r8
    13c4:	f3 01       	movw	r30, r6
    13c6:	e8 0d       	add	r30, r8
    13c8:	f1 1d       	adc	r31, r1
    13ca:	80 81       	ld	r24, Z
    13cc:	b6 01       	movw	r22, r12
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	40 d0       	rcall	.+128    	; 0x1452 <fputc>
    13d2:	81 10       	cpse	r8, r1
    13d4:	f6 cf       	rjmp	.-20     	; 0x13c2 <__stack+0x2c3>
    13d6:	22 20       	and	r2, r2
    13d8:	09 f4       	brne	.+2      	; 0x13dc <__stack+0x2dd>
    13da:	4e ce       	rjmp	.-868    	; 0x1078 <vfprintf+0x4c>
    13dc:	b6 01       	movw	r22, r12
    13de:	80 e2       	ldi	r24, 0x20	; 32
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	37 d0       	rcall	.+110    	; 0x1452 <fputc>
    13e4:	2a 94       	dec	r2
    13e6:	f7 cf       	rjmp	.-18     	; 0x13d6 <__stack+0x2d7>
    13e8:	f6 01       	movw	r30, r12
    13ea:	86 81       	ldd	r24, Z+6	; 0x06
    13ec:	97 81       	ldd	r25, Z+7	; 0x07
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <__stack+0x2f5>
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	9f ef       	ldi	r25, 0xFF	; 255
    13f4:	2b 96       	adiw	r28, 0x0b	; 11
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	bf 90       	pop	r11
    1412:	af 90       	pop	r10
    1414:	9f 90       	pop	r9
    1416:	8f 90       	pop	r8
    1418:	7f 90       	pop	r7
    141a:	6f 90       	pop	r6
    141c:	5f 90       	pop	r5
    141e:	4f 90       	pop	r4
    1420:	3f 90       	pop	r3
    1422:	2f 90       	pop	r2
    1424:	08 95       	ret

00001426 <strnlen_P>:
    1426:	fc 01       	movw	r30, r24
    1428:	05 90       	lpm	r0, Z+
    142a:	61 50       	subi	r22, 0x01	; 1
    142c:	70 40       	sbci	r23, 0x00	; 0
    142e:	01 10       	cpse	r0, r1
    1430:	d8 f7       	brcc	.-10     	; 0x1428 <strnlen_P+0x2>
    1432:	80 95       	com	r24
    1434:	90 95       	com	r25
    1436:	8e 0f       	add	r24, r30
    1438:	9f 1f       	adc	r25, r31
    143a:	08 95       	ret

0000143c <strnlen>:
    143c:	fc 01       	movw	r30, r24
    143e:	61 50       	subi	r22, 0x01	; 1
    1440:	70 40       	sbci	r23, 0x00	; 0
    1442:	01 90       	ld	r0, Z+
    1444:	01 10       	cpse	r0, r1
    1446:	d8 f7       	brcc	.-10     	; 0x143e <strnlen+0x2>
    1448:	80 95       	com	r24
    144a:	90 95       	com	r25
    144c:	8e 0f       	add	r24, r30
    144e:	9f 1f       	adc	r25, r31
    1450:	08 95       	ret

00001452 <fputc>:
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	fb 01       	movw	r30, r22
    145c:	23 81       	ldd	r18, Z+3	; 0x03
    145e:	21 fd       	sbrc	r18, 1
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <fputc+0x16>
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	9f ef       	ldi	r25, 0xFF	; 255
    1466:	2c c0       	rjmp	.+88     	; 0x14c0 <fputc+0x6e>
    1468:	22 ff       	sbrs	r18, 2
    146a:	16 c0       	rjmp	.+44     	; 0x1498 <fputc+0x46>
    146c:	46 81       	ldd	r20, Z+6	; 0x06
    146e:	57 81       	ldd	r21, Z+7	; 0x07
    1470:	24 81       	ldd	r18, Z+4	; 0x04
    1472:	35 81       	ldd	r19, Z+5	; 0x05
    1474:	42 17       	cp	r20, r18
    1476:	53 07       	cpc	r21, r19
    1478:	44 f4       	brge	.+16     	; 0x148a <fputc+0x38>
    147a:	a0 81       	ld	r26, Z
    147c:	b1 81       	ldd	r27, Z+1	; 0x01
    147e:	9d 01       	movw	r18, r26
    1480:	2f 5f       	subi	r18, 0xFF	; 255
    1482:	3f 4f       	sbci	r19, 0xFF	; 255
    1484:	31 83       	std	Z+1, r19	; 0x01
    1486:	20 83       	st	Z, r18
    1488:	8c 93       	st	X, r24
    148a:	26 81       	ldd	r18, Z+6	; 0x06
    148c:	37 81       	ldd	r19, Z+7	; 0x07
    148e:	2f 5f       	subi	r18, 0xFF	; 255
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	37 83       	std	Z+7, r19	; 0x07
    1494:	26 83       	std	Z+6, r18	; 0x06
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <fputc+0x6e>
    1498:	8b 01       	movw	r16, r22
    149a:	ec 01       	movw	r28, r24
    149c:	fb 01       	movw	r30, r22
    149e:	00 84       	ldd	r0, Z+8	; 0x08
    14a0:	f1 85       	ldd	r31, Z+9	; 0x09
    14a2:	e0 2d       	mov	r30, r0
    14a4:	09 95       	icall
    14a6:	89 2b       	or	r24, r25
    14a8:	e1 f6       	brne	.-72     	; 0x1462 <fputc+0x10>
    14aa:	d8 01       	movw	r26, r16
    14ac:	16 96       	adiw	r26, 0x06	; 6
    14ae:	8d 91       	ld	r24, X+
    14b0:	9c 91       	ld	r25, X
    14b2:	17 97       	sbiw	r26, 0x07	; 7
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	17 96       	adiw	r26, 0x07	; 7
    14b8:	9c 93       	st	X, r25
    14ba:	8e 93       	st	-X, r24
    14bc:	16 97       	sbiw	r26, 0x06	; 6
    14be:	ce 01       	movw	r24, r28
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <__ultoa_invert>:
    14ca:	fa 01       	movw	r30, r20
    14cc:	aa 27       	eor	r26, r26
    14ce:	28 30       	cpi	r18, 0x08	; 8
    14d0:	51 f1       	breq	.+84     	; 0x1526 <__ultoa_invert+0x5c>
    14d2:	20 31       	cpi	r18, 0x10	; 16
    14d4:	81 f1       	breq	.+96     	; 0x1536 <__ultoa_invert+0x6c>
    14d6:	e8 94       	clt
    14d8:	6f 93       	push	r22
    14da:	6e 7f       	andi	r22, 0xFE	; 254
    14dc:	6e 5f       	subi	r22, 0xFE	; 254
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	8f 4f       	sbci	r24, 0xFF	; 255
    14e2:	9f 4f       	sbci	r25, 0xFF	; 255
    14e4:	af 4f       	sbci	r26, 0xFF	; 255
    14e6:	b1 e0       	ldi	r27, 0x01	; 1
    14e8:	3e d0       	rcall	.+124    	; 0x1566 <__ultoa_invert+0x9c>
    14ea:	b4 e0       	ldi	r27, 0x04	; 4
    14ec:	3c d0       	rcall	.+120    	; 0x1566 <__ultoa_invert+0x9c>
    14ee:	67 0f       	add	r22, r23
    14f0:	78 1f       	adc	r23, r24
    14f2:	89 1f       	adc	r24, r25
    14f4:	9a 1f       	adc	r25, r26
    14f6:	a1 1d       	adc	r26, r1
    14f8:	68 0f       	add	r22, r24
    14fa:	79 1f       	adc	r23, r25
    14fc:	8a 1f       	adc	r24, r26
    14fe:	91 1d       	adc	r25, r1
    1500:	a1 1d       	adc	r26, r1
    1502:	6a 0f       	add	r22, r26
    1504:	71 1d       	adc	r23, r1
    1506:	81 1d       	adc	r24, r1
    1508:	91 1d       	adc	r25, r1
    150a:	a1 1d       	adc	r26, r1
    150c:	20 d0       	rcall	.+64     	; 0x154e <__ultoa_invert+0x84>
    150e:	09 f4       	brne	.+2      	; 0x1512 <__ultoa_invert+0x48>
    1510:	68 94       	set
    1512:	3f 91       	pop	r19
    1514:	2a e0       	ldi	r18, 0x0A	; 10
    1516:	26 9f       	mul	r18, r22
    1518:	11 24       	eor	r1, r1
    151a:	30 19       	sub	r19, r0
    151c:	30 5d       	subi	r19, 0xD0	; 208
    151e:	31 93       	st	Z+, r19
    1520:	de f6       	brtc	.-74     	; 0x14d8 <__ultoa_invert+0xe>
    1522:	cf 01       	movw	r24, r30
    1524:	08 95       	ret
    1526:	46 2f       	mov	r20, r22
    1528:	47 70       	andi	r20, 0x07	; 7
    152a:	40 5d       	subi	r20, 0xD0	; 208
    152c:	41 93       	st	Z+, r20
    152e:	b3 e0       	ldi	r27, 0x03	; 3
    1530:	0f d0       	rcall	.+30     	; 0x1550 <__ultoa_invert+0x86>
    1532:	c9 f7       	brne	.-14     	; 0x1526 <__ultoa_invert+0x5c>
    1534:	f6 cf       	rjmp	.-20     	; 0x1522 <__ultoa_invert+0x58>
    1536:	46 2f       	mov	r20, r22
    1538:	4f 70       	andi	r20, 0x0F	; 15
    153a:	40 5d       	subi	r20, 0xD0	; 208
    153c:	4a 33       	cpi	r20, 0x3A	; 58
    153e:	18 f0       	brcs	.+6      	; 0x1546 <__ultoa_invert+0x7c>
    1540:	49 5d       	subi	r20, 0xD9	; 217
    1542:	31 fd       	sbrc	r19, 1
    1544:	40 52       	subi	r20, 0x20	; 32
    1546:	41 93       	st	Z+, r20
    1548:	02 d0       	rcall	.+4      	; 0x154e <__ultoa_invert+0x84>
    154a:	a9 f7       	brne	.-22     	; 0x1536 <__ultoa_invert+0x6c>
    154c:	ea cf       	rjmp	.-44     	; 0x1522 <__ultoa_invert+0x58>
    154e:	b4 e0       	ldi	r27, 0x04	; 4
    1550:	a6 95       	lsr	r26
    1552:	97 95       	ror	r25
    1554:	87 95       	ror	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	ba 95       	dec	r27
    155c:	c9 f7       	brne	.-14     	; 0x1550 <__ultoa_invert+0x86>
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	61 05       	cpc	r22, r1
    1562:	71 05       	cpc	r23, r1
    1564:	08 95       	ret
    1566:	9b 01       	movw	r18, r22
    1568:	ac 01       	movw	r20, r24
    156a:	0a 2e       	mov	r0, r26
    156c:	06 94       	lsr	r0
    156e:	57 95       	ror	r21
    1570:	47 95       	ror	r20
    1572:	37 95       	ror	r19
    1574:	27 95       	ror	r18
    1576:	ba 95       	dec	r27
    1578:	c9 f7       	brne	.-14     	; 0x156c <__ultoa_invert+0xa2>
    157a:	62 0f       	add	r22, r18
    157c:	73 1f       	adc	r23, r19
    157e:	84 1f       	adc	r24, r20
    1580:	95 1f       	adc	r25, r21
    1582:	a0 1d       	adc	r26, r0
    1584:	08 95       	ret

00001586 <_exit>:
    1586:	f8 94       	cli

00001588 <__stop_program>:
    1588:	ff cf       	rjmp	.-2      	; 0x1588 <__stop_program>
